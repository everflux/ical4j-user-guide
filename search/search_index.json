{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction The iCal4j project is a collection of Open Source Java libraries providing support for the iCalendar specifications (RFCs). The core iCal4j library provides an implementation of the iCalendar specifications that are designed to facilitate interoperability between calendaring and scheduling software systems. iCalendar provides a common data format used to store scheduling information such as events, appointments, to-do lists, etc. All of the popular calendaring tools, such as Lotus Notes, Outlook and Apple's iCal also support the iCalendar standard. For a concise description of the goals and directions of iCal4j please take a look at the open issues . In this guide You will find examples of how to use iCal4j, as well as throughout the API documentation . Detailed descriptions of changes included in each release may be found in the CHANGELOG . iCal4j was created with the help of Open Source software.","title":"Introduction"},{"location":"#introduction","text":"The iCal4j project is a collection of Open Source Java libraries providing support for the iCalendar specifications (RFCs). The core iCal4j library provides an implementation of the iCalendar specifications that are designed to facilitate interoperability between calendaring and scheduling software systems. iCalendar provides a common data format used to store scheduling information such as events, appointments, to-do lists, etc. All of the popular calendaring tools, such as Lotus Notes, Outlook and Apple's iCal also support the iCalendar standard. For a concise description of the goals and directions of iCal4j please take a look at the open issues . In this guide You will find examples of how to use iCal4j, as well as throughout the API documentation . Detailed descriptions of changes included in each release may be found in the CHANGELOG . iCal4j was created with the help of Open Source software.","title":"Introduction"},{"location":"android/","text":"Android Support You can use iCal4j directly in your Android applications. Instructions for adding third-party libraries in Eclipse available here . Gradle/AndroidStudio You can use iCal4j with your AndroidStudio/gradle buildfile. This is a working build.gradle example taken from https://github.com/k3b/CalendarIcsAdapter apply plugin: 'android' configurations { // referenced in some portable lib. use android internal instead compile.exclude group: 'commons-logging' } android { compileSdkVersion 19 buildToolsVersion '20' packagingOptions { // prevent duplicate files exclude 'META-INF/LICENSE.txt' exclude 'META-INF/NOTICE.txt' //!!! andoird buildToolsVersion 19.0.3 does not support exclude with wildcards yet :-( exclude('org/apache/commons/codec/language/bm/*.txt') // 124 files (uncompressed 215kb) with unused language specific rules } defaultConfig { minSdkVersion 7 targetSdkVersion 19 } } dependencies { compile 'org.mnode.ical4j:ical4j:1.0.5' compile 'backport-util-concurrent:backport-util-concurrent:3.1' compile 'commons-codec:commons-codec:1.8' compile 'commons-lang:commons-lang:2.6' } Eclipse The Android eclipse plugin is quite useful for creating Android projects, just remember that to make resources visible to the iCal4j library they should be added to the 'src' directory rather than 'res'. For example; <project_root> - src +- ical4j.properties +- <your Android source> - res +- <your Android app resources> - lib +- ical4j.jar +- commons-logging.jar +- commons-lang.jar +- commons-codec.jar +- backport-util-concurrent.jar Maven The Android maven plugin allows you to configure your dependencies, such as iCal4j in the usual way. The important parts to your pom.xml are as follows: <project ..> ... <packaging>apk</packaging> <dependencies> <dependency> <groupId>net.fortuna.ical4j</groupId> <artifactId>ical4j</artifactId> <version>1.0-SNAPSHOT</version> </dependency> <dependency> <groupId>com.google.android</groupId> <artifactId>android</artifactId> <version>1.6_r2</version> <scope>provided</scope> </dependency> </dependencies> <build> <sourceDirectory>src</sourceDirectory> <testSourceDirectory>test</testSourceDirectory> <plugins> <plugin> <groupId>com.jayway.maven.plugins.android.generation2</groupId> <artifactId>maven-android-plugin</artifactId> <version>2.6.0</version> <configuration> <sdk> <platform>4</platform> </sdk> <emulator> <avd>SE_X10_Mini</avd> </emulator> <deleteConflictingFiles>true</deleteConflictingFiles> <undeployBeforeDeploy>true</undeployBeforeDeploy> </configuration> <extensions>true</extensions> </plugin> <plugin> <artifactId>maven-compiler-plugin</artifactId> <configuration> <source>5</source> <target>5</target> </configuration> </plugin> </plugins> </build> </project> A simple Android test project has been created to demonstrate iCal4j usage. You can browse the contents of this project here . Caveats Note that there are a couple of library dependencies that are required by iCal4j that are also included in Android (but not exposed in the API docs). These are: commons-logging commons-codec backport-util-current (not required for Java 5+) As a result I believe (untested) that you won't need to include these dependencies in your APK. The easiest way to exclude them using maven is to change the scope to provided for these dependences. ie: <project ..> ... <dependencies> <dependency> <groupId>net.fortuna.ical4j</groupId> <artifactId>ical4j</artifactId> <version>1.0</version> </dependency> <dependency> <groupId>commons-logging</groupId> <artifactId>commons-logging</artifactId> <version>1.1.1</version> <scope>provided</scope> </dependency> <dependency> <groupId>commons-codec</groupId> <artifactId>commons-codec</artifactId> <version>1.2</version> <scope>provided</scope> </dependency> <dependency> <groupId>backport-util-concurrent</groupId> <artifactId>backport-util-concurrent</artifactId> <version>3.1</version> <scope>provided</scope> </dependency> <dependency> <groupId>com.google.android</groupId> <artifactId>android</artifactId> <version>2.3.3</version> <scope>provided</scope> </dependency> </dependencies> </project> Reducing Android-footprint by using proguard ical4j has several groovy classes that are not supported by android and fortunately you can live without them under android. You can remove unused staff from your android app using proguard. Here is a working example from https://github.com/k3b/CalendarIcsAdapter # proguard-rules.txt # ## ical4j also contains groovy code which is not used in android -dontwarn groovy.** -dontwarn org.codehaus.groovy.** -dontwarn org.apache.commons.logging.** -dontwarn sun.misc.Perf -dontnote com.google.vending.** -dontnote com.android.vending.licensing.** ################### # Get rid of #can't find referenced method in library class java.lang.Object# warnings for clone() and finalize() # Warning: net.fortuna.ical4j.model.CalendarFactory: can't find referenced method 'void finalize()' in library class java.lang.Object # Warning: net.fortuna.ical4j.model.ContentBuilder: can't find referenced method 'java.lang.Object clone()' in library class java.lang.Object # for details see http://stackoverflow.com/questions/23883028/how-to-fix-proguard-warning-cant-find-referenced-method-for-existing-methods -dontwarn net.fortuna.ical4j.model.** ############### # I use proguard only to remove unused stuff and to keep the app small. # I donot want to obfuscate (rename packages, classes, methods, ...) since this is open source -keepnames class ** { *; } -keepnames interface ** { *; } -keepnames enum ** { *; } Statistics: without proguard obfuscation: 932 classes; apk 911kb. with proguard obfuscation: 365 classes;apk 505kb Note: If you want to use proguard with gradle your build.gradle also needs this: buildTypes { release { minifyEnabled true proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt' } debug { minifyEnabled true proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt' } } Further instructions on reducing the size of your APK using Proguard are available here .","title":"Android"},{"location":"android/#android-support","text":"You can use iCal4j directly in your Android applications. Instructions for adding third-party libraries in Eclipse available here .","title":"Android Support"},{"location":"android/#gradleandroidstudio","text":"You can use iCal4j with your AndroidStudio/gradle buildfile. This is a working build.gradle example taken from https://github.com/k3b/CalendarIcsAdapter apply plugin: 'android' configurations { // referenced in some portable lib. use android internal instead compile.exclude group: 'commons-logging' } android { compileSdkVersion 19 buildToolsVersion '20' packagingOptions { // prevent duplicate files exclude 'META-INF/LICENSE.txt' exclude 'META-INF/NOTICE.txt' //!!! andoird buildToolsVersion 19.0.3 does not support exclude with wildcards yet :-( exclude('org/apache/commons/codec/language/bm/*.txt') // 124 files (uncompressed 215kb) with unused language specific rules } defaultConfig { minSdkVersion 7 targetSdkVersion 19 } } dependencies { compile 'org.mnode.ical4j:ical4j:1.0.5' compile 'backport-util-concurrent:backport-util-concurrent:3.1' compile 'commons-codec:commons-codec:1.8' compile 'commons-lang:commons-lang:2.6' }","title":"Gradle/AndroidStudio"},{"location":"android/#eclipse","text":"The Android eclipse plugin is quite useful for creating Android projects, just remember that to make resources visible to the iCal4j library they should be added to the 'src' directory rather than 'res'. For example; <project_root> - src +- ical4j.properties +- <your Android source> - res +- <your Android app resources> - lib +- ical4j.jar +- commons-logging.jar +- commons-lang.jar +- commons-codec.jar +- backport-util-concurrent.jar","title":"Eclipse"},{"location":"android/#maven","text":"The Android maven plugin allows you to configure your dependencies, such as iCal4j in the usual way. The important parts to your pom.xml are as follows: <project ..> ... <packaging>apk</packaging> <dependencies> <dependency> <groupId>net.fortuna.ical4j</groupId> <artifactId>ical4j</artifactId> <version>1.0-SNAPSHOT</version> </dependency> <dependency> <groupId>com.google.android</groupId> <artifactId>android</artifactId> <version>1.6_r2</version> <scope>provided</scope> </dependency> </dependencies> <build> <sourceDirectory>src</sourceDirectory> <testSourceDirectory>test</testSourceDirectory> <plugins> <plugin> <groupId>com.jayway.maven.plugins.android.generation2</groupId> <artifactId>maven-android-plugin</artifactId> <version>2.6.0</version> <configuration> <sdk> <platform>4</platform> </sdk> <emulator> <avd>SE_X10_Mini</avd> </emulator> <deleteConflictingFiles>true</deleteConflictingFiles> <undeployBeforeDeploy>true</undeployBeforeDeploy> </configuration> <extensions>true</extensions> </plugin> <plugin> <artifactId>maven-compiler-plugin</artifactId> <configuration> <source>5</source> <target>5</target> </configuration> </plugin> </plugins> </build> </project> A simple Android test project has been created to demonstrate iCal4j usage. You can browse the contents of this project here .","title":"Maven"},{"location":"android/#caveats","text":"Note that there are a couple of library dependencies that are required by iCal4j that are also included in Android (but not exposed in the API docs). These are: commons-logging commons-codec backport-util-current (not required for Java 5+) As a result I believe (untested) that you won't need to include these dependencies in your APK. The easiest way to exclude them using maven is to change the scope to provided for these dependences. ie: <project ..> ... <dependencies> <dependency> <groupId>net.fortuna.ical4j</groupId> <artifactId>ical4j</artifactId> <version>1.0</version> </dependency> <dependency> <groupId>commons-logging</groupId> <artifactId>commons-logging</artifactId> <version>1.1.1</version> <scope>provided</scope> </dependency> <dependency> <groupId>commons-codec</groupId> <artifactId>commons-codec</artifactId> <version>1.2</version> <scope>provided</scope> </dependency> <dependency> <groupId>backport-util-concurrent</groupId> <artifactId>backport-util-concurrent</artifactId> <version>3.1</version> <scope>provided</scope> </dependency> <dependency> <groupId>com.google.android</groupId> <artifactId>android</artifactId> <version>2.3.3</version> <scope>provided</scope> </dependency> </dependencies> </project>","title":"Caveats"},{"location":"android/#reducing-android-footprint-by-using-proguard","text":"ical4j has several groovy classes that are not supported by android and fortunately you can live without them under android. You can remove unused staff from your android app using proguard. Here is a working example from https://github.com/k3b/CalendarIcsAdapter # proguard-rules.txt # ## ical4j also contains groovy code which is not used in android -dontwarn groovy.** -dontwarn org.codehaus.groovy.** -dontwarn org.apache.commons.logging.** -dontwarn sun.misc.Perf -dontnote com.google.vending.** -dontnote com.android.vending.licensing.** ################### # Get rid of #can't find referenced method in library class java.lang.Object# warnings for clone() and finalize() # Warning: net.fortuna.ical4j.model.CalendarFactory: can't find referenced method 'void finalize()' in library class java.lang.Object # Warning: net.fortuna.ical4j.model.ContentBuilder: can't find referenced method 'java.lang.Object clone()' in library class java.lang.Object # for details see http://stackoverflow.com/questions/23883028/how-to-fix-proguard-warning-cant-find-referenced-method-for-existing-methods -dontwarn net.fortuna.ical4j.model.** ############### # I use proguard only to remove unused stuff and to keep the app small. # I donot want to obfuscate (rename packages, classes, methods, ...) since this is open source -keepnames class ** { *; } -keepnames interface ** { *; } -keepnames enum ** { *; } Statistics: without proguard obfuscation: 932 classes; apk 911kb. with proguard obfuscation: 365 classes;apk 505kb Note: If you want to use proguard with gradle your build.gradle also needs this: buildTypes { release { minifyEnabled true proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt' } debug { minifyEnabled true proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt' } } Further instructions on reducing the size of your APK using Proguard are available here .","title":"Reducing Android-footprint by using proguard"},{"location":"compatibility/","text":"Compatibility with other CUAs To increase interoperability with other CUAs a number of Compatibility Hints are provided in iCal4j. You can enable these hints in one of three (3) ways: Enabling Compatibility Hints programmatically Compatibility Hints can be enabled and disabled by calling the static method CompatibilityHints.setHintEnabled() . For example: CompatibilityHints.setHintEnabled(KEY_RELAXED_UNFOLDING, true); Specifying Compatibility Hints in a properties file Create a file called ical4j.properties and include it in the root of your classpath (alternatively you can copy a sample file from CVS). Add appropriate lines for enabling hints. So for example, to enable relaxed unfolding add the following: ical4j.unfolding.relaxed=true The complete list of Compatibility Hint properties is as follows: ical4j.unfolding.relaxed={true|false} ical4j.parsing.relaxed={true|false} ical4j.validation.relaxed={true|false} ical4j.compatibility.outlook={true|false} ical4j.compatibility.notes={true|false} Specifying Compatibility Hints as System properties You may also specify the same Compatibility Hints above as System properties. For example: java -Dical4j.unfolding.relaxed=true <some_program>","title":"Compatibility"},{"location":"compatibility/#compatibility-with-other-cuas","text":"To increase interoperability with other CUAs a number of Compatibility Hints are provided in iCal4j. You can enable these hints in one of three (3) ways:","title":"Compatibility with other CUAs"},{"location":"compatibility/#enabling-compatibility-hints-programmatically","text":"Compatibility Hints can be enabled and disabled by calling the static method CompatibilityHints.setHintEnabled() . For example: CompatibilityHints.setHintEnabled(KEY_RELAXED_UNFOLDING, true);","title":"Enabling Compatibility Hints programmatically"},{"location":"compatibility/#specifying-compatibility-hints-in-a-properties-file","text":"Create a file called ical4j.properties and include it in the root of your classpath (alternatively you can copy a sample file from CVS). Add appropriate lines for enabling hints. So for example, to enable relaxed unfolding add the following: ical4j.unfolding.relaxed=true The complete list of Compatibility Hint properties is as follows: ical4j.unfolding.relaxed={true|false} ical4j.parsing.relaxed={true|false} ical4j.validation.relaxed={true|false} ical4j.compatibility.outlook={true|false} ical4j.compatibility.notes={true|false}","title":"Specifying Compatibility Hints in a properties file"},{"location":"compatibility/#specifying-compatibility-hints-as-system-properties","text":"You may also specify the same Compatibility Hints above as System properties. For example: java -Dical4j.unfolding.relaxed=true <some_program>","title":"Specifying Compatibility Hints as System properties"},{"location":"cuas/","text":"Calendar User Agents A Calendar User Agent (CUA) is software that supports the iCalendar specification. This page provides information regarding the different categories of CUAs. Rich Clients Microsoft Outlook Language: C (?) License: Proprietary RFC2445 Deviations: * allows DATE-TIME representation without specifying a VALUE=DATE-TIME parameter * Outlook will not read files that don't contain the mandatory UID and DTSTAMP properties in VEVENT, etc. components * provides quoted TZID parameters, and as such does not conform with RFC2445 * generates additional spaces in recurrence rules containing a BYDAY component * 2003 will only accept folded lines of exactly 75 octets * 2007 will fold lines with all folded lines starting with a tab instead of spaces Non-standard Properties: * X-MICROSOFT-CDO-BUSYSTATUS:TENTATIVE * X-MICROSOFT-CDO-IMPORTANCE:1 * X-MICROSOFT-CDO-INTENDEDSTATUS:BUSY * X-MICROSOFT-DISALLOW-COUNTER:FALSE * X-MS-OLK-ALLOWEXTERNCHECK:TRUE * X-MS-OLK-AUTOSTARTCHECK:FALSE * X-MS-OLK-CONFTYPE:0 * X-MS-OLK-SENDER;CN=Test:mailto:user@example.com Lotus Notes Language: C (?) License: Proprietary RFC2445 Deviations: * Requires METHOD:REQUEST for non-optional attendees Non-standard Properties: * X-LOTUS-BROADCAST:FALSE (required for non-optional organizer?) * X-LOTUS-CHARSET:UTF-8 * X-LOTUS-UPDATE-SEQ:1 * X-LOTUS-UPDATE-WISL:$S:1;$L:1;$B:1;$R:1;$E:1;$W:1;$O:1;$M:1 * X-LOTUS-NOTESVERSION:2 * X-LOTUS-NOTICETYPE:I * X-LOTUS-APPTTYPE:3 * X-LOTUS-CHILD_UID:9DA9112BB4438073C125750E004B7055 Mozilla Calendar Language: C (?) License: MPL RFC2445 Deviations: * long content lines are folded with a single LF character (should be CRLF) * folds all property parameters and values * Generates non-standard \"X\" properties Apple iCal Language: Unknown License: Proprietary RFC2445 Deviations: * uses VALUE=TEXT on some X-properties (NOTE: this is valid behaviour) * iCal events don't include the mandatory DTSTAMP property * iCal 1.0 doesn't appear to include VTIMEZONE definitions where applicable (this appears fixed as of 1.5) Evolution Language: C (?) License: GPL KOrganizer Language: C (?) License: GPL RFC2445 Deviations: * long content lines are folded with a single LF character (should be CRLF) * folds all property parameters and values Chandler Language: Python License: GPL k5n Desktop Calendar (k5nCal) Language: Java 1.5 License: GPL (3rd party libraries with other licenses) Web Applications PHP iCalendar Language: PHP License: GPL RFC2445 Deviations: * long content lines are folded with a single LF character (should be CRLF) Webical Language: Java License: GPL Google Calendar Language: Unknown License: N/A RFC2445 Deviations: * Generates DTSTART properties in DATE format without specifying the required VALUE=DATE parameter WebCalendar Language: PHP License: GPL RFC2445 Deviations: * Generates invalid ATTENDEE lines Calendar Servers Hula Project Language: Unknown License: GPL Cosmo Language: Java License: Apache 2.0","title":"CUAs"},{"location":"cuas/#calendar-user-agents","text":"A Calendar User Agent (CUA) is software that supports the iCalendar specification. This page provides information regarding the different categories of CUAs.","title":"Calendar User Agents"},{"location":"cuas/#rich-clients","text":"","title":"Rich Clients"},{"location":"cuas/#microsoft-outlook","text":"Language: C (?) License: Proprietary RFC2445 Deviations: * allows DATE-TIME representation without specifying a VALUE=DATE-TIME parameter * Outlook will not read files that don't contain the mandatory UID and DTSTAMP properties in VEVENT, etc. components * provides quoted TZID parameters, and as such does not conform with RFC2445 * generates additional spaces in recurrence rules containing a BYDAY component * 2003 will only accept folded lines of exactly 75 octets * 2007 will fold lines with all folded lines starting with a tab instead of spaces Non-standard Properties: * X-MICROSOFT-CDO-BUSYSTATUS:TENTATIVE * X-MICROSOFT-CDO-IMPORTANCE:1 * X-MICROSOFT-CDO-INTENDEDSTATUS:BUSY * X-MICROSOFT-DISALLOW-COUNTER:FALSE * X-MS-OLK-ALLOWEXTERNCHECK:TRUE * X-MS-OLK-AUTOSTARTCHECK:FALSE * X-MS-OLK-CONFTYPE:0 * X-MS-OLK-SENDER;CN=Test:mailto:user@example.com","title":"Microsoft Outlook"},{"location":"cuas/#lotus-notes","text":"Language: C (?) License: Proprietary RFC2445 Deviations: * Requires METHOD:REQUEST for non-optional attendees Non-standard Properties: * X-LOTUS-BROADCAST:FALSE (required for non-optional organizer?) * X-LOTUS-CHARSET:UTF-8 * X-LOTUS-UPDATE-SEQ:1 * X-LOTUS-UPDATE-WISL:$S:1;$L:1;$B:1;$R:1;$E:1;$W:1;$O:1;$M:1 * X-LOTUS-NOTESVERSION:2 * X-LOTUS-NOTICETYPE:I * X-LOTUS-APPTTYPE:3 * X-LOTUS-CHILD_UID:9DA9112BB4438073C125750E004B7055","title":"Lotus Notes"},{"location":"cuas/#mozilla-calendar","text":"Language: C (?) License: MPL RFC2445 Deviations: * long content lines are folded with a single LF character (should be CRLF) * folds all property parameters and values * Generates non-standard \"X\" properties","title":"Mozilla Calendar"},{"location":"cuas/#apple-ical","text":"Language: Unknown License: Proprietary RFC2445 Deviations: * uses VALUE=TEXT on some X-properties (NOTE: this is valid behaviour) * iCal events don't include the mandatory DTSTAMP property * iCal 1.0 doesn't appear to include VTIMEZONE definitions where applicable (this appears fixed as of 1.5)","title":"Apple iCal"},{"location":"cuas/#evolution","text":"Language: C (?) License: GPL","title":"Evolution"},{"location":"cuas/#korganizer","text":"Language: C (?) License: GPL RFC2445 Deviations: * long content lines are folded with a single LF character (should be CRLF) * folds all property parameters and values","title":"KOrganizer"},{"location":"cuas/#chandler","text":"Language: Python License: GPL","title":"Chandler"},{"location":"cuas/#k5n-desktop-calendar-k5ncal","text":"Language: Java 1.5 License: GPL (3rd party libraries with other licenses)","title":"k5n Desktop Calendar (k5nCal)"},{"location":"cuas/#web-applications","text":"","title":"Web Applications"},{"location":"cuas/#php-icalendar","text":"Language: PHP License: GPL RFC2445 Deviations: * long content lines are folded with a single LF character (should be CRLF)","title":"PHP iCalendar"},{"location":"cuas/#webical","text":"Language: Java License: GPL","title":"Webical"},{"location":"cuas/#google-calendar","text":"Language: Unknown License: N/A RFC2445 Deviations: * Generates DTSTART properties in DATE format without specifying the required VALUE=DATE parameter","title":"Google Calendar"},{"location":"cuas/#webcalendar","text":"Language: PHP License: GPL RFC2445 Deviations: * Generates invalid ATTENDEE lines","title":"WebCalendar"},{"location":"cuas/#calendar-servers","text":"","title":"Calendar Servers"},{"location":"cuas/#hula-project","text":"Language: Unknown License: GPL","title":"Hula Project"},{"location":"cuas/#cosmo","text":"Language: Java License: Apache 2.0","title":"Cosmo"},{"location":"datetime/","text":"Date/Time Concepts Date and time types in iCal4j are all extensions of the Iso8601 type. This type uses a date format instance (with an associated timezone) for string parsing and formatting. Date A Date represents a day of the year, with no time component. As time is irrelevant for a Date instance, no timezone information is associated with a Date (*). Note that with the iCal4j implementation this is not entirely true. As dates are represented using Java's java.text.DateFormat, a timezone is inherently associated with dates. For this reason, by default Date implementations will use the GMT timezone for formatting and parsing. You can override this to use the local timezone by specifying the following flag as a system property or in the ical4j.properties file: net.fortuna.ical4j.timezone.date.floating=true DateTime A DateTime represents a time of day on a specific day of the year. There are three (3) variants of DateTime representation. Date with Local Time A date with local time does not explicitly specify an associated timezone, and is said to be \"floating\" in the sense that it represents a time in the local timezone of the CUA. For this reason, floating DateTime instances will always use the default timezone for parsing and formatting string representations. An example of a floating DateTime instance is as follows: DTSTART:19980118T230000 Date with UTC Time A DateTime may be specified as in UTC time by appending a 'Z' to the string representation as follows: DTSTART:19980119T070000Z In iCal4j, a DateTime instance parsed from such a string representation, or explicitly defined as a UTC instance, will use the \"Etc/UTC\" timezone for parsing and formatting string representations. Date with Local Time and a Timezone reference A DateTime may also be specified with a timezone reference, meaning that the time is associated with an explicit timezone. For example: DTSTART;TZID=US-Eastern:19980119T020000 In iCal4j, DateTime instances generated from parsing such a string, or explicitly defined with an associated timezone, will use the specified timezone for parsing and formatting string representations.","title":"Date/Time Concepts"},{"location":"datetime/#datetime-concepts","text":"Date and time types in iCal4j are all extensions of the Iso8601 type. This type uses a date format instance (with an associated timezone) for string parsing and formatting.","title":"Date/Time Concepts"},{"location":"datetime/#date","text":"A Date represents a day of the year, with no time component. As time is irrelevant for a Date instance, no timezone information is associated with a Date (*). Note that with the iCal4j implementation this is not entirely true. As dates are represented using Java's java.text.DateFormat, a timezone is inherently associated with dates. For this reason, by default Date implementations will use the GMT timezone for formatting and parsing. You can override this to use the local timezone by specifying the following flag as a system property or in the ical4j.properties file: net.fortuna.ical4j.timezone.date.floating=true","title":"Date"},{"location":"datetime/#datetime","text":"A DateTime represents a time of day on a specific day of the year. There are three (3) variants of DateTime representation.","title":"DateTime"},{"location":"datetime/#date-with-local-time","text":"A date with local time does not explicitly specify an associated timezone, and is said to be \"floating\" in the sense that it represents a time in the local timezone of the CUA. For this reason, floating DateTime instances will always use the default timezone for parsing and formatting string representations. An example of a floating DateTime instance is as follows: DTSTART:19980118T230000","title":"Date with Local Time"},{"location":"datetime/#date-with-utc-time","text":"A DateTime may be specified as in UTC time by appending a 'Z' to the string representation as follows: DTSTART:19980119T070000Z In iCal4j, a DateTime instance parsed from such a string representation, or explicitly defined as a UTC instance, will use the \"Etc/UTC\" timezone for parsing and formatting string representations.","title":"Date with UTC Time"},{"location":"datetime/#date-with-local-time-and-a-timezone-reference","text":"A DateTime may also be specified with a timezone reference, meaning that the time is associated with an explicit timezone. For example: DTSTART;TZID=US-Eastern:19980119T020000 In iCal4j, DateTime instances generated from parsing such a string, or explicitly defined with an associated timezone, will use the specified timezone for parsing and formatting string representations.","title":"Date with Local Time and a Timezone reference"},{"location":"encoding/","text":"Content Encoding Supported Encodings By default, iCal4j supports the MIME encodings specified in RFC2045 as follows: 7BIT - An \"indicator\" that the data is 7bit data. 8BIT - An \"indicator\" that the data is 8bit data. BINARY - An \"indicator\" that the data is binary data. QUOTED-PRINTABLE - Transforms data into printable ASCII characters. BASE64 - Transforms data into the Base64 representation of its bytes. Additional Encodings You may add support for additional encodings by providing an implementation of net.fortuna.ical4j.util.EncoderFactory and/or net.fortuna.ical4j.util.DecoderFactory . You can instruct iCal4j to use these factories by specifying the following system properties: net.fortuna.ical4j.factory.encoder= net.fortuna.ical4j.factory.decoder=","title":"Encoding"},{"location":"encoding/#content-encoding","text":"","title":"Content Encoding"},{"location":"encoding/#supported-encodings","text":"By default, iCal4j supports the MIME encodings specified in RFC2045 as follows: 7BIT - An \"indicator\" that the data is 7bit data. 8BIT - An \"indicator\" that the data is 8bit data. BINARY - An \"indicator\" that the data is binary data. QUOTED-PRINTABLE - Transforms data into printable ASCII characters. BASE64 - Transforms data into the Base64 representation of its bytes.","title":"Supported Encodings"},{"location":"encoding/#additional-encodings","text":"You may add support for additional encodings by providing an implementation of net.fortuna.ical4j.util.EncoderFactory and/or net.fortuna.ical4j.util.DecoderFactory . You can instruct iCal4j to use these factories by specifying the following system properties: net.fortuna.ical4j.factory.encoder= net.fortuna.ical4j.factory.decoder=","title":"Additional Encodings"},{"location":"extensions/","text":"iCal4j Extensions iCal4j Extensions is a Java library that provides support for widely used non-standard iCalendar objects (i.e. properties and parameters). These model extensions are implemented via the [object registry]]([ModelExtensions|custom) support in iCal4j. Usage To add support for extensions you may register the required factories with your CalendarBuilder instance: CalendarParser parser = CalendarParserFactory.getInstance().createParser(); PropertyFactoryRegistry propertyFactoryRegistry = new PropertyFactoryRegistry(); propertyFactoryRegistry.register(WrTimezone.PROPERTY_NAME, WrTimezone.FACTORY); propertyFactoryRegistry.register(WrCalName.PROPERTY_NAME, WrCalName.FACTORY); ParameterFactoryRegistry parameterFactoryRegistry = new ParameterFactoryRegistry(); TimeZoneRegistry tzRegistry = TimeZoneRegistryFactory.getInstance().createRegistry(); builder = new CalendarBuilder(parser, propertyFactoryRegistry, parameterFactoryRegistry, tzRegistry); Minimum requirements iCal4j Extensions requires a minimum of Java 5 due to the use of features introduced in this version. If you need to run on an earlier version of Java, consider using Retroweaver . Project Information Project Home Javadocs Download Releases Traditionally any components, properties and parameters not defined by RFC2445 are classified as non-standard or extension objects. These objects must include the \"X-\" name prefix to be compliant with the specification. In the iCal4j object model, these objects are represented by the XComponent, XProperty and XParameter classes respectively. Names that do not conform to the \"X-\" name prefix requirement may be supported by enabling the following Compatibility Hint: ical4j.parsing.relaxed Extension Factory Registration There are a number of deficiences with above approach, most notably that only String values are supported by X{Component|Property|Parameter}, and there is no option for supporting some well-known non-standard objects. PropertyFactoryRegistry You can now add support for extension properties by registering custom PropertyFactory implementations: PropertyFactory somePropertyFactory = ... PropertyFactoryRegistry propertyFactoryRegistry = new PropertyFactoryRegistry(); propertyFactoryRegistry.register(somePropertyFactory); CalendarBuilder builder = new CalendarBuilder(CalendarParserFactory.getInstance().createParser(), ComponentFactory.getInstance(), propertyFactoryRegistry, new ParameterFactoryRegistry(), TimeZoneRegistryFactory.getInstance().createRegistry()); Calendar calendar = builder.build(..); ParameterFactoryRegistry Extension parameters are also supported: ParameterFactory someParameterFactory = ... ParameterFactoryRegistry parameterFactoryRegistry = new ParameterFactoryRegistry(); parameterFactoryRegistry.register(someParameterFactory); CalendarBuilder builder = new CalendarBuilder(CalendarParserFactory.getInstance().createParser(), ComponentFactory.getInstance(), new PropertyFactoryRegistry(), parameterFactoryRegistry, TimeZoneRegistryFactory.getInstance().createRegistry()); Calendar calendar = builder.build(..); Common Extensions A collection of commonly used iCalendar extension objects are available in the [[Extensions|ical4j-extensions]] sub-project.","title":"iCal4j Extensions"},{"location":"extensions/#ical4j-extensions","text":"iCal4j Extensions is a Java library that provides support for widely used non-standard iCalendar objects (i.e. properties and parameters). These model extensions are implemented via the [object registry]]([ModelExtensions|custom) support in iCal4j.","title":"iCal4j Extensions"},{"location":"extensions/#usage","text":"To add support for extensions you may register the required factories with your CalendarBuilder instance: CalendarParser parser = CalendarParserFactory.getInstance().createParser(); PropertyFactoryRegistry propertyFactoryRegistry = new PropertyFactoryRegistry(); propertyFactoryRegistry.register(WrTimezone.PROPERTY_NAME, WrTimezone.FACTORY); propertyFactoryRegistry.register(WrCalName.PROPERTY_NAME, WrCalName.FACTORY); ParameterFactoryRegistry parameterFactoryRegistry = new ParameterFactoryRegistry(); TimeZoneRegistry tzRegistry = TimeZoneRegistryFactory.getInstance().createRegistry(); builder = new CalendarBuilder(parser, propertyFactoryRegistry, parameterFactoryRegistry, tzRegistry);","title":"Usage"},{"location":"extensions/#minimum-requirements","text":"iCal4j Extensions requires a minimum of Java 5 due to the use of features introduced in this version. If you need to run on an earlier version of Java, consider using Retroweaver .","title":"Minimum requirements"},{"location":"extensions/#project-information","text":"Project Home Javadocs","title":"Project Information"},{"location":"extensions/#download","text":"Releases Traditionally any components, properties and parameters not defined by RFC2445 are classified as non-standard or extension objects. These objects must include the \"X-\" name prefix to be compliant with the specification. In the iCal4j object model, these objects are represented by the XComponent, XProperty and XParameter classes respectively. Names that do not conform to the \"X-\" name prefix requirement may be supported by enabling the following Compatibility Hint: ical4j.parsing.relaxed","title":"Download"},{"location":"extensions/#extension-factory-registration","text":"There are a number of deficiences with above approach, most notably that only String values are supported by X{Component|Property|Parameter}, and there is no option for supporting some well-known non-standard objects.","title":"Extension Factory Registration"},{"location":"extensions/#propertyfactoryregistry","text":"You can now add support for extension properties by registering custom PropertyFactory implementations: PropertyFactory somePropertyFactory = ... PropertyFactoryRegistry propertyFactoryRegistry = new PropertyFactoryRegistry(); propertyFactoryRegistry.register(somePropertyFactory); CalendarBuilder builder = new CalendarBuilder(CalendarParserFactory.getInstance().createParser(), ComponentFactory.getInstance(), propertyFactoryRegistry, new ParameterFactoryRegistry(), TimeZoneRegistryFactory.getInstance().createRegistry()); Calendar calendar = builder.build(..);","title":"PropertyFactoryRegistry"},{"location":"extensions/#parameterfactoryregistry","text":"Extension parameters are also supported: ParameterFactory someParameterFactory = ... ParameterFactoryRegistry parameterFactoryRegistry = new ParameterFactoryRegistry(); parameterFactoryRegistry.register(someParameterFactory); CalendarBuilder builder = new CalendarBuilder(CalendarParserFactory.getInstance().createParser(), ComponentFactory.getInstance(), new PropertyFactoryRegistry(), parameterFactoryRegistry, TimeZoneRegistryFactory.getInstance().createRegistry()); Calendar calendar = builder.build(..);","title":"ParameterFactoryRegistry"},{"location":"extensions/#common-extensions","text":"A collection of commonly used iCalendar extension objects are available in the [[Extensions|ical4j-extensions]] sub-project.","title":"Common Extensions"},{"location":"external-resources/","text":"References Resources Source code: https://github.com/ical4j/ical4j Documentation: https://ical4j.github.io/docs/ical4j Releases: https://bintray.com/ical4j/maven/ical4j","title":"External Resources"},{"location":"external-resources/#references","text":"","title":"References"},{"location":"external-resources/#resources","text":"Source code: https://github.com/ical4j/ical4j Documentation: https://ical4j.github.io/docs/ical4j Releases: https://bintray.com/ical4j/maven/ical4j","title":"Resources"},{"location":"faq/","text":"Frequently Asked Questions Q. Why does iCal4j use Jakarta Commons Logging? A. I guess this is a question everyone is confronted with these days - I think much of the hostility towards commons logging is way overdone, but here are my reasons anyway: I like log4j. I think its easier to use than java.util.logging. That's not to say that java.util.logging won't get better, or maybe another logging API will surpass log4j. So I'd like to leave the option open. Following on from that, I also believe that the users of iCal4j should be free to choose what logging API they use. I don't want to force iCal4j users to use log4j just because I prefer it. Commons logging is much smaller than log4j, so it is more friendly to include in the iCal4j distribution. Adding log4j would add an extra few hundred kilobytes. I have seen many of the arguments against commons logging, and to some extent I agree: if you have a controlled development environment you may as well impose a concrete logging implementation (e.g. log4j). But with iCal4j I want to leave the choice up to the users (see 2. again!). Q. Why does iCal4j provide its own Date and Timezone implementations rather than using something like Joda Time? A. I have looked into it (especially for timezones) but found Joda Time to be a bit too heavy-weight for iCal4j. I also believe that for iCal4j its better to stick to the standard Java API that everyone knows rather than forcing people to learn a new Date/Time API. I think if Sun had used a few more interfaces in defining their Date/Time API we would all be better off, but unfortunately we have to make do with what we have. Q. Where does iCal4j get timezone information from? A. Timezone definitions in iCal4j are generated from the [Olson] [http://en.wikipedia.org/wiki/Zoneinfo Zoneinfo] database. Each release of iCal4j is updated with the latest Olson definitions. http://java.sun.com/developer/technicalArticles/Intl/FAQ_appendix.html This article from Sun appears to offer some details about the changes introduced in each release of the Olson data. Q. Why does iCal4j have a minimum requirement of Java 1.4? Is it possible to use iCal4j with a pre-1.4 Java runtime? A. Choosing Java 1.4 as the minimum required JVM was initially slightly arbitrary, and probably based on the fact that most people were using 1.4 as a minimum. Since then, however, there are three features of 1.4 I can think of that iCal4j requires: the URI class, the java.util.regex.* package (used in StringUtils) and the java.nio.charset package. If you don't think you will be needing these features in your own code, you may want to try compiling iCal4j with JDK 1.4 using the \"-target 1.3\" option but without specifying an alternative \"-bootclasspath\" option. From what I can tell, this should generate 1.3 bytecode that you can run on a 1.3 JVM. Note however, that if your code does cause iCal4j to load the URI or java.util.regex.* references then it will fail on a 1.3 JVM (as these APIs aren't available). Q. When I create a GEO property using BigDecimals the string representation is incorrect. e.g: BigDecimal latitude = new BigDecimal(65.35); BigDecimal longitude = new BigDecimal(22.01); Geo geo = new Geo(latitude, longitude); Output: GEO:65.349999999999994315658113919198513031005859375;22.01000000000000156 A. This problem occurs when the number specified cannot accurately be represented by a double value in Java. More on this effect [here]. The solution is to use either a string representation of the specified number, or http://java.sun.com/j2se/1.5.0/docs/api/java/math/BigDecimal.html#valueOf(double) BigDecimal.valueOf(double) to create your BigDecimal. i.e: BigDecimal latitude = BigDecimal.valueOf(65.35); BigDecimal longitude = BigDecimal.valueOf(22.01); Geo geo = new Geo(latitude, longitude); Q. How do I generate calendar data using a non-standard charset? A. The default charset used by the CalendarOutputter is UTF-8. If you would like to generate calendar data using a different charset you can do so by creating an instance of OutputStreamWriter (or whatever type of Writer you prefer), specifying the charset via the constructor. The CalendarOutputter will respect the charset specified for a Writer provided via the method: CalendarOutputter.output(Calendar calendar, Writer out) Q. Does iCal4j work with Android? I tried using it in my Android project but I get a \"verifier rejected class\" error. A. iCal4j does works with Android, however you must remember to include the following iCal4j dependencies in addition to the iCal4j library: commons-lang commons-logging (Possibly optional - due to unofficial inclusion with Android) commons-codec (Possibly optional - due to unofficial inclusion with Android) For more details see https://github.com/ical4j/ical4j/wiki/Android. Q. How do I create a meeting request in MS Outlook that can be accepted by the Organizer? A. It appears there is a bug in MS Outlook that can be solved by a hotfix. See here for details. Q. I cannot find the answer to my question. What should I do now? A. If you cannot find what you need on this Wiki, the next best thing is to post a question in the forums .","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#q-why-does-ical4j-use-jakarta-commons-logging","text":"A. I guess this is a question everyone is confronted with these days - I think much of the hostility towards commons logging is way overdone, but here are my reasons anyway: I like log4j. I think its easier to use than java.util.logging. That's not to say that java.util.logging won't get better, or maybe another logging API will surpass log4j. So I'd like to leave the option open. Following on from that, I also believe that the users of iCal4j should be free to choose what logging API they use. I don't want to force iCal4j users to use log4j just because I prefer it. Commons logging is much smaller than log4j, so it is more friendly to include in the iCal4j distribution. Adding log4j would add an extra few hundred kilobytes. I have seen many of the arguments against commons logging, and to some extent I agree: if you have a controlled development environment you may as well impose a concrete logging implementation (e.g. log4j). But with iCal4j I want to leave the choice up to the users (see 2. again!).","title":"Q. Why does iCal4j use Jakarta Commons Logging?"},{"location":"faq/#q-why-does-ical4j-provide-its-own-date-and-timezone-implementations-rather-than-using-something-like-joda-time","text":"A. I have looked into it (especially for timezones) but found Joda Time to be a bit too heavy-weight for iCal4j. I also believe that for iCal4j its better to stick to the standard Java API that everyone knows rather than forcing people to learn a new Date/Time API. I think if Sun had used a few more interfaces in defining their Date/Time API we would all be better off, but unfortunately we have to make do with what we have.","title":"Q. Why does iCal4j provide its own Date and Timezone implementations rather than using something like Joda Time?"},{"location":"faq/#q-where-does-ical4j-get-timezone-information-from","text":"A. Timezone definitions in iCal4j are generated from the [Olson] [http://en.wikipedia.org/wiki/Zoneinfo Zoneinfo] database. Each release of iCal4j is updated with the latest Olson definitions. http://java.sun.com/developer/technicalArticles/Intl/FAQ_appendix.html This article from Sun appears to offer some details about the changes introduced in each release of the Olson data.","title":"Q. Where does iCal4j get timezone information from?"},{"location":"faq/#q-why-does-ical4j-have-a-minimum-requirement-of-java-14-is-it-possible-to-use-ical4j-with-a-pre-14-java-runtime","text":"A. Choosing Java 1.4 as the minimum required JVM was initially slightly arbitrary, and probably based on the fact that most people were using 1.4 as a minimum. Since then, however, there are three features of 1.4 I can think of that iCal4j requires: the URI class, the java.util.regex.* package (used in StringUtils) and the java.nio.charset package. If you don't think you will be needing these features in your own code, you may want to try compiling iCal4j with JDK 1.4 using the \"-target 1.3\" option but without specifying an alternative \"-bootclasspath\" option. From what I can tell, this should generate 1.3 bytecode that you can run on a 1.3 JVM. Note however, that if your code does cause iCal4j to load the URI or java.util.regex.* references then it will fail on a 1.3 JVM (as these APIs aren't available).","title":"Q. Why does iCal4j have a minimum requirement of Java 1.4? Is it possible to use iCal4j with a pre-1.4 Java runtime?"},{"location":"faq/#q-when-i-create-a-geo-property-using-bigdecimals-the-string-representation-is-incorrect-eg","text":"BigDecimal latitude = new BigDecimal(65.35); BigDecimal longitude = new BigDecimal(22.01); Geo geo = new Geo(latitude, longitude); Output: GEO:65.349999999999994315658113919198513031005859375;22.01000000000000156 A. This problem occurs when the number specified cannot accurately be represented by a double value in Java. More on this effect [here]. The solution is to use either a string representation of the specified number, or http://java.sun.com/j2se/1.5.0/docs/api/java/math/BigDecimal.html#valueOf(double) BigDecimal.valueOf(double) to create your BigDecimal. i.e: BigDecimal latitude = BigDecimal.valueOf(65.35); BigDecimal longitude = BigDecimal.valueOf(22.01); Geo geo = new Geo(latitude, longitude);","title":"Q. When I create a GEO property using BigDecimals the string representation is incorrect. e.g:"},{"location":"faq/#q-how-do-i-generate-calendar-data-using-a-non-standard-charset","text":"A. The default charset used by the CalendarOutputter is UTF-8. If you would like to generate calendar data using a different charset you can do so by creating an instance of OutputStreamWriter (or whatever type of Writer you prefer), specifying the charset via the constructor. The CalendarOutputter will respect the charset specified for a Writer provided via the method: CalendarOutputter.output(Calendar calendar, Writer out)","title":"Q. How do I generate calendar data using a non-standard charset?"},{"location":"faq/#q-does-ical4j-work-with-android-i-tried-using-it-in-my-android-project-but-i-get-a-verifier-rejected-class-error","text":"A. iCal4j does works with Android, however you must remember to include the following iCal4j dependencies in addition to the iCal4j library: commons-lang commons-logging (Possibly optional - due to unofficial inclusion with Android) commons-codec (Possibly optional - due to unofficial inclusion with Android) For more details see https://github.com/ical4j/ical4j/wiki/Android.","title":"Q. Does iCal4j work with Android? I tried using it in my Android project but I get a \"verifier rejected class\" error."},{"location":"faq/#q-how-do-i-create-a-meeting-request-in-ms-outlook-that-can-be-accepted-by-the-organizer","text":"A. It appears there is a bug in MS Outlook that can be solved by a hotfix. See here for details.","title":"Q. How do I create a meeting request in MS Outlook that can be accepted by the Organizer?"},{"location":"faq/#q-i-cannot-find-the-answer-to-my-question-what-should-i-do-now","text":"A. If you cannot find what you need on this Wiki, the next best thing is to post a question in the forums .","title":"Q. I cannot find the answer to my question. What should I do now?"},{"location":"filtering/","text":"iCal4j Filters In addition to a robust and compliant implementation of the iCalendar specification, it is also important to have an expressive and powerful mechanism for accessing calendar data. iCal4j filters provide a framework for calendar object retrieval whether it be in-memory object models or some other data source. Filter Expressions Filter expressions serve to provide an abstract syntax tree (AST) for modeling an iCalendar filter that can be used to filter data from various data sources. Unary Expression A unary expression contains a single operand and operator, with the operand being another expression. Unary expressions may be of prefix or postfix form: <operator> <operand> # prefix unary expression, such as 'not something' <operand> <operator> # postfix expression, such as 'something exists' Some example unary expressions include: not attendee = 'joeb@example.com' # events not including joeb not due < startOfDay() # todos that are not overdue attendee[partstat:TENTATIVE] exists # events with tentative attendees attendee[role:CHAIR] not exists # events without a chair Binary Expression A binary expression include a left and right operand and and operator. Some example binary expressions include: attendee = 'job@example.com # events including joeb due < startOfDay() # todos that are overdue Specification Expression A specification expression represents an object specification, with a name, optional value and attributes. For example, a specification representing a property would be a property name, (optional) property value and a list of parameter attributes. A specification match is defined as matching object name and the existence of the specified attributes. If a value is supplied this must also match the object value. NOTE: The specification value is used to test object equivalence with unary expressions. For binary expression matching the literal expression is used to provide a value. Literal Expression A literal expression is the mechanism to supply a specification value for binary expressions. Supported literals include String, Integer, Date, Collection and Function, which may be used with both comparison and value matching operators. Expression Operators Operators are used in binary and unary expressions to specify expression behaviour. Object Matching Operators An object matching operator is used to test for existence of an object matching the specification. In addition to the specification used in unary expressions, binary expressions also test for a literal value. Object matching operators include: equalTo - a binary expression operator that matches object exactly on both specification and literal value notEqualTo - the negative of the equalTo operator in - a binary expression operator that matches exactly any object in the collection literal notIn - the negative of the in operator. exists - a unary expression operator that tests for the existence of the specified operand (only applicable for specification expression operands) not exists - the negative of the exists operator Comparison Operators Comparison operators include: greaterThan - a binary expression operator that matches object comparison greater than the supplied specification value greaterThanEqual a binary expression operator that matches object comparison greater than or equal to the supplied specification value lessThan a binary expression operator that matches object comparison less than the supplied specification value lessThanEqual a binary expression operator that matches object comparison less than or equal to the supplied specification value between a binary expression operator that matches object comparison greater than or equal to the first element in the supplied specification collection, and less than or equal to the second specification collection value Value Matching Operators Value matching operators include: contains a binary expression operator that matches object values that contain the supplied specification value string matches a binary expression operator that matches object values against the supplied specification regular expression Logical Operators Logical operators include: and a binary expression operator that returns the logical and of two expressions (not applicable for specification or literal expression operands) or a binary expression operator that returns the logical or of two expressions (not applicable for specification or literal expression operands) not - the negation of the operand expression (not applicable for specification or literal expression operands) Expression Parser TBD. Component Filter The ComponentFilter is an implementation of a PredicateFactory that is able to convert a filter expression into a Predicate for iCal4j Components. Property Filter The PropertyFilter is an implementation of a PredicateFactory that is able to convert a filter expression into a Predicate for iCal4j Properties.","title":"Filtering"},{"location":"filtering/#ical4j-filters","text":"In addition to a robust and compliant implementation of the iCalendar specification, it is also important to have an expressive and powerful mechanism for accessing calendar data. iCal4j filters provide a framework for calendar object retrieval whether it be in-memory object models or some other data source.","title":"iCal4j Filters"},{"location":"filtering/#filter-expressions","text":"Filter expressions serve to provide an abstract syntax tree (AST) for modeling an iCalendar filter that can be used to filter data from various data sources.","title":"Filter Expressions"},{"location":"filtering/#unary-expression","text":"A unary expression contains a single operand and operator, with the operand being another expression. Unary expressions may be of prefix or postfix form: <operator> <operand> # prefix unary expression, such as 'not something' <operand> <operator> # postfix expression, such as 'something exists' Some example unary expressions include: not attendee = 'joeb@example.com' # events not including joeb not due < startOfDay() # todos that are not overdue attendee[partstat:TENTATIVE] exists # events with tentative attendees attendee[role:CHAIR] not exists # events without a chair","title":"Unary Expression"},{"location":"filtering/#binary-expression","text":"A binary expression include a left and right operand and and operator. Some example binary expressions include: attendee = 'job@example.com # events including joeb due < startOfDay() # todos that are overdue","title":"Binary Expression"},{"location":"filtering/#specification-expression","text":"A specification expression represents an object specification, with a name, optional value and attributes. For example, a specification representing a property would be a property name, (optional) property value and a list of parameter attributes. A specification match is defined as matching object name and the existence of the specified attributes. If a value is supplied this must also match the object value. NOTE: The specification value is used to test object equivalence with unary expressions. For binary expression matching the literal expression is used to provide a value.","title":"Specification Expression"},{"location":"filtering/#literal-expression","text":"A literal expression is the mechanism to supply a specification value for binary expressions. Supported literals include String, Integer, Date, Collection and Function, which may be used with both comparison and value matching operators.","title":"Literal Expression"},{"location":"filtering/#expression-operators","text":"Operators are used in binary and unary expressions to specify expression behaviour.","title":"Expression Operators"},{"location":"filtering/#object-matching-operators","text":"An object matching operator is used to test for existence of an object matching the specification. In addition to the specification used in unary expressions, binary expressions also test for a literal value. Object matching operators include: equalTo - a binary expression operator that matches object exactly on both specification and literal value notEqualTo - the negative of the equalTo operator in - a binary expression operator that matches exactly any object in the collection literal notIn - the negative of the in operator. exists - a unary expression operator that tests for the existence of the specified operand (only applicable for specification expression operands) not exists - the negative of the exists operator","title":"Object Matching Operators"},{"location":"filtering/#comparison-operators","text":"Comparison operators include: greaterThan - a binary expression operator that matches object comparison greater than the supplied specification value greaterThanEqual a binary expression operator that matches object comparison greater than or equal to the supplied specification value lessThan a binary expression operator that matches object comparison less than the supplied specification value lessThanEqual a binary expression operator that matches object comparison less than or equal to the supplied specification value between a binary expression operator that matches object comparison greater than or equal to the first element in the supplied specification collection, and less than or equal to the second specification collection value","title":"Comparison Operators"},{"location":"filtering/#value-matching-operators","text":"Value matching operators include: contains a binary expression operator that matches object values that contain the supplied specification value string matches a binary expression operator that matches object values against the supplied specification regular expression","title":"Value Matching Operators"},{"location":"filtering/#logical-operators","text":"Logical operators include: and a binary expression operator that returns the logical and of two expressions (not applicable for specification or literal expression operands) or a binary expression operator that returns the logical or of two expressions (not applicable for specification or literal expression operands) not - the negation of the operand expression (not applicable for specification or literal expression operands)","title":"Logical Operators"},{"location":"filtering/#expression-parser","text":"TBD.","title":"Expression Parser"},{"location":"filtering/#component-filter","text":"The ComponentFilter is an implementation of a PredicateFactory that is able to convert a filter expression into a Predicate for iCal4j Components.","title":"Component Filter"},{"location":"filtering/#property-filter","text":"The PropertyFilter is an implementation of a PredicateFactory that is able to convert a filter expression into a Predicate for iCal4j Properties.","title":"Property Filter"},{"location":"getting-started/","text":"Getting Started These instructions are designed to help you get a basic setup, to be able to start coding with iCal4j. Download iCal4j libraries are currently published directly to Maven Central . Use the following table to identify current coordinates for iCal4j libraries: Name Current Coordinates Deprecated Coordinates ical4j Maven - ical4j-vcard Maven - ical4j-extensions Maven - ical4j-zoneinfo-outlook Maven - ical4j-connector Maven Maven ical4j-integration Maven Maven ical4j-serializer Maven Maven Extract Extract the files included in the zip archive to a folder on your hard drive. Build (Optional) If you choose to download the source distribution you will need to build the library. This can be done using the Gradle build script (build.gradle) found in the root directory. Include in your Classpath Including iCal4j in your classpath depends on how you are developing your software. Typically an IDE such as [Eclipse] is used, in which case you would right-click on your Eclipse project and add the ical4j.jar to the Build Path. Note that you will also need to include all compile-time https://github.com/ical4j/ical4j#system-requirements dependencies in your classpath also. Add Import Statements to Your Classes Add import statements in your classes to reference the appropriate net.fortuna.ical4j.* packages or the specific classes you'll be using. For example, to use the Calendar class, add: import net.fortuna.ical4j.model.*; or import net.fortuna.ical4j.model.Calendar; Ready to go! You should now be ready to start working with iCal4j.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"These instructions are designed to help you get a basic setup, to be able to start coding with iCal4j.","title":"Getting Started"},{"location":"getting-started/#download","text":"iCal4j libraries are currently published directly to Maven Central . Use the following table to identify current coordinates for iCal4j libraries: Name Current Coordinates Deprecated Coordinates ical4j Maven - ical4j-vcard Maven - ical4j-extensions Maven - ical4j-zoneinfo-outlook Maven - ical4j-connector Maven Maven ical4j-integration Maven Maven ical4j-serializer Maven Maven","title":"Download"},{"location":"getting-started/#extract","text":"Extract the files included in the zip archive to a folder on your hard drive.","title":"Extract"},{"location":"getting-started/#build-optional","text":"If you choose to download the source distribution you will need to build the library. This can be done using the Gradle build script (build.gradle) found in the root directory.","title":"Build (Optional)"},{"location":"getting-started/#include-in-your-classpath","text":"Including iCal4j in your classpath depends on how you are developing your software. Typically an IDE such as [Eclipse] is used, in which case you would right-click on your Eclipse project and add the ical4j.jar to the Build Path. Note that you will also need to include all compile-time https://github.com/ical4j/ical4j#system-requirements dependencies in your classpath also.","title":"Include in your Classpath"},{"location":"getting-started/#add-import-statements-to-your-classes","text":"Add import statements in your classes to reference the appropriate net.fortuna.ical4j.* packages or the specific classes you'll be using. For example, to use the Calendar class, add: import net.fortuna.ical4j.model.*; or import net.fortuna.ical4j.model.Calendar;","title":"Add Import Statements to Your Classes"},{"location":"getting-started/#ready-to-go","text":"You should now be ready to start working with iCal4j.","title":"Ready to go!"},{"location":"groovy/","text":"Groovy Support Content Builder Constructing iCalendar and vCard object models can be quite a tedious process in Java, however the Groovy-based ContentBuilder simplifies this task: vCard def builder = new ContentBuilder() def card = builder.vcard() { version(value: '4.0') fn(value: 'test') n(value: 'example') photo(value: 'http://example.com/photo', parameters: [value('uri')]) } card.validate() Where a property doesn't require any parameters the syntax may be even more concise: def builder = new ContentBuilder() def card = builder.vcard() { version('4.0') fn('test') n('example') photo(value: 'http://example.com/photo', parameters: [value('uri')]) } card.validate() Property parameters that are not required for property construction may also be nested: def builder = new ContentBuilder() def card = builder.vcard() { version('4.0') fn('test') n('example') { value('text') } photo(value: 'http://example.com/photo', parameters: [value('uri')]) } card.validate() Attach a photo as encoded binary data: def builder = new ContentBuilder() def card = builder.vcard() { version('4.0') fn('test') n('example') { value('text') } photo(new File('http://example.com/photo.png').bytes.encodeBase64() as String) } card.validate() iCalendar def builder = new ContentBuilder() def calendar = builder.calendar() { prodid('-//Ben Fortuna//iCal4j 1.0//EN') version('2.0') vevent() { uid('1') dtstamp(new DtStamp()) dtstart('20090810', parameters: parameters() { value('DATE')}) action('DISPLAY') attach('http://example.com/attachment', parameters: parameters() { value('URI')}) } } Attach a vCard to an iCalendar object: import net.fortuna.ical4j.model.property.DtStamp def icalendar = new net.fortuna.ical4j.model.ContentBuilder(); def vcard = new net.fortuna.ical4j.vcard.ContentBuilder(); def card = vcard.vcard() { version(value: '4.0') fn(value: 'test') n(value: 'example') photo(value: 'http://example.com/photo', parameters: [value('uri')]) } card.validate() //println(card) def calendar = icalendar.calendar() { prodid('-//Ben Fortuna//iCal4j 1.0//EN') version('2.0') vevent() { uid('1') dtstamp(new DtStamp()) dtstart('20090810', parameters: parameters() { value('DATE')}) action('DISPLAY') attach('http://example.com/attachment', parameters: parameters() { value('URI')}) attach(card.toString(), parameters: parameters() { fmttype('text/vcard') encoding('8BIT') value('TEXT')}) } } calendar.validate() println(calendar) Groovlet Here is an example Groovlet that parses a specified calendar and outputs all of the event summaries in HTML: import net.fortuna.ical4j.data.CalendarBuilder import net.fortuna.ical4j.model.Calendar import net.fortuna.ical4j.model.Component import net.fortuna.ical4j.model.component.VEvent html.html { head { title \"Event Summary\" } body { def builder = new CalendarBuilder() def calendar = builder.build(new URL(request.getParameter(\"u\")).openStream()) if (calendar.getProperty(\"X-WR-CALNAME\")) { h1 calendar.getProperty(\"X-WR-CALNAME\").getValue() } else if (calendar.getProperty(\"X-WR-CALDESC\")) { h1 calendar.getProperty(\"X-WR-CALDESC\").getValue() } else { h1 \"Event Summary\" } table { tbody { for (event in calendar.getComponents(Component.VEVENT)) { if (event.getSummary()) { tr { td event.getSummary().getValue() td event.getStartDate().getDate() } } } } } } } GSP Here is an [article] demonstrating iCal4j and http://groovy.codehaus.org/GSP GSP integration. Grails - iCalendar Plugin Here is an introduction how to use iCal4j and Grails with the iCalendar Grails Plugin . Using Grape You can also use [Grape] to manage your iCal4j dependencies, however you will need to add the Modularity Maven repositories to your http://groovy.codehaus.org/Grape#Grape-CustomizeIvysettings Grape config as follows: ... ... Then you can use scripts like this without any dependency configuration required: import net.fortuna.ical4j.vcard.ContentBuilder import net.fortuna.ical4j.model.property.DtStamp @Grab(group='org.mnode.ical4j', module='ical4j', version='1.0.2') @Grab(group='org.mnode.ical4j', module='ical4j-vcard', version='0.9.6.2') def getCalendar() { def builder = new ContentBuilder() builder.calendar() { prodid('-//Ben Fortuna//iCal4j 1.0//EN') version('2.0') vevent() { uid('1') dtstamp(new DtStamp()) dtstart('20090810', parameters: parameters() { value('DATE')}) action('DISPLAY') attach('http://example.com/attachment', parameters: parameters() { value('URI')}) } } } println(calendar) Connecting to a CalDAV Store You can also use the iCal4j connector to connect to a CalDAV store (e.g. Google Calendar). For example: import net.fortuna.ical4j.connector.dav.CalDavCalendarStore import net.fortuna.ical4j.connector.dav.PathResolver import org.apache.commons.httpclient.protocol.Protocol class GCalPathResolver extends PathResolver { String getPrincipalPath(String username) { return \"/calendar/dav/\" + username + \"/events/\" } String getUserPath(String username) { return \"/calendar/dav/\" + username + \"/user/\" } } @Grab(group='net.fortuna.ical4j', module='ical4j-connector', version='0.9.1-SNAPSHOT') @Grab(group='org.slf4j', module='slf4j-simple', version='1.5.3') def getCollections() { def PRODID = \"-//Ben Fortuna//iCal4j Connector 1.0//EN\" def host = \"www.google.com\" def port = 443 def path = \"/calendar/dav/\" def protocol = Protocol.getProtocol(\"https\") def pathResolver = new GCalPathResolver() def store = new CalDavCalendarStore(PRODID, host, port, protocol, pathResolver) store.connect(' ', ' '.toCharArray()) def collections = store.collections } collections.each() { println \"${it.description}: ${it.components.size()}\" }","title":"Groovy"},{"location":"groovy/#groovy-support","text":"","title":"Groovy Support"},{"location":"groovy/#content-builder","text":"Constructing iCalendar and vCard object models can be quite a tedious process in Java, however the Groovy-based ContentBuilder simplifies this task:","title":"Content Builder"},{"location":"groovy/#vcard","text":"def builder = new ContentBuilder() def card = builder.vcard() { version(value: '4.0') fn(value: 'test') n(value: 'example') photo(value: 'http://example.com/photo', parameters: [value('uri')]) } card.validate() Where a property doesn't require any parameters the syntax may be even more concise: def builder = new ContentBuilder() def card = builder.vcard() { version('4.0') fn('test') n('example') photo(value: 'http://example.com/photo', parameters: [value('uri')]) } card.validate() Property parameters that are not required for property construction may also be nested: def builder = new ContentBuilder() def card = builder.vcard() { version('4.0') fn('test') n('example') { value('text') } photo(value: 'http://example.com/photo', parameters: [value('uri')]) } card.validate() Attach a photo as encoded binary data: def builder = new ContentBuilder() def card = builder.vcard() { version('4.0') fn('test') n('example') { value('text') } photo(new File('http://example.com/photo.png').bytes.encodeBase64() as String) } card.validate()","title":"vCard"},{"location":"groovy/#icalendar","text":"def builder = new ContentBuilder() def calendar = builder.calendar() { prodid('-//Ben Fortuna//iCal4j 1.0//EN') version('2.0') vevent() { uid('1') dtstamp(new DtStamp()) dtstart('20090810', parameters: parameters() { value('DATE')}) action('DISPLAY') attach('http://example.com/attachment', parameters: parameters() { value('URI')}) } } Attach a vCard to an iCalendar object: import net.fortuna.ical4j.model.property.DtStamp def icalendar = new net.fortuna.ical4j.model.ContentBuilder(); def vcard = new net.fortuna.ical4j.vcard.ContentBuilder(); def card = vcard.vcard() { version(value: '4.0') fn(value: 'test') n(value: 'example') photo(value: 'http://example.com/photo', parameters: [value('uri')]) } card.validate() //println(card) def calendar = icalendar.calendar() { prodid('-//Ben Fortuna//iCal4j 1.0//EN') version('2.0') vevent() { uid('1') dtstamp(new DtStamp()) dtstart('20090810', parameters: parameters() { value('DATE')}) action('DISPLAY') attach('http://example.com/attachment', parameters: parameters() { value('URI')}) attach(card.toString(), parameters: parameters() { fmttype('text/vcard') encoding('8BIT') value('TEXT')}) } } calendar.validate() println(calendar)","title":"iCalendar"},{"location":"groovy/#groovlet","text":"Here is an example Groovlet that parses a specified calendar and outputs all of the event summaries in HTML: import net.fortuna.ical4j.data.CalendarBuilder import net.fortuna.ical4j.model.Calendar import net.fortuna.ical4j.model.Component import net.fortuna.ical4j.model.component.VEvent html.html { head { title \"Event Summary\" } body { def builder = new CalendarBuilder() def calendar = builder.build(new URL(request.getParameter(\"u\")).openStream()) if (calendar.getProperty(\"X-WR-CALNAME\")) { h1 calendar.getProperty(\"X-WR-CALNAME\").getValue() } else if (calendar.getProperty(\"X-WR-CALDESC\")) { h1 calendar.getProperty(\"X-WR-CALDESC\").getValue() } else { h1 \"Event Summary\" } table { tbody { for (event in calendar.getComponents(Component.VEVENT)) { if (event.getSummary()) { tr { td event.getSummary().getValue() td event.getStartDate().getDate() } } } } } } }","title":"Groovlet"},{"location":"groovy/#gsp","text":"Here is an [article] demonstrating iCal4j and http://groovy.codehaus.org/GSP GSP integration.","title":"GSP"},{"location":"groovy/#grails-icalendar-plugin","text":"Here is an introduction how to use iCal4j and Grails with the iCalendar Grails Plugin .","title":"Grails - iCalendar Plugin"},{"location":"groovy/#using-grape","text":"You can also use [Grape] to manage your iCal4j dependencies, however you will need to add the Modularity Maven repositories to your http://groovy.codehaus.org/Grape#Grape-CustomizeIvysettings Grape config as follows: ... ... Then you can use scripts like this without any dependency configuration required: import net.fortuna.ical4j.vcard.ContentBuilder import net.fortuna.ical4j.model.property.DtStamp @Grab(group='org.mnode.ical4j', module='ical4j', version='1.0.2') @Grab(group='org.mnode.ical4j', module='ical4j-vcard', version='0.9.6.2') def getCalendar() { def builder = new ContentBuilder() builder.calendar() { prodid('-//Ben Fortuna//iCal4j 1.0//EN') version('2.0') vevent() { uid('1') dtstamp(new DtStamp()) dtstart('20090810', parameters: parameters() { value('DATE')}) action('DISPLAY') attach('http://example.com/attachment', parameters: parameters() { value('URI')}) } } } println(calendar)","title":"Using Grape"},{"location":"groovy/#connecting-to-a-caldav-store","text":"You can also use the iCal4j connector to connect to a CalDAV store (e.g. Google Calendar). For example: import net.fortuna.ical4j.connector.dav.CalDavCalendarStore import net.fortuna.ical4j.connector.dav.PathResolver import org.apache.commons.httpclient.protocol.Protocol class GCalPathResolver extends PathResolver { String getPrincipalPath(String username) { return \"/calendar/dav/\" + username + \"/events/\" } String getUserPath(String username) { return \"/calendar/dav/\" + username + \"/user/\" } } @Grab(group='net.fortuna.ical4j', module='ical4j-connector', version='0.9.1-SNAPSHOT') @Grab(group='org.slf4j', module='slf4j-simple', version='1.5.3') def getCollections() { def PRODID = \"-//Ben Fortuna//iCal4j Connector 1.0//EN\" def host = \"www.google.com\" def port = 443 def path = \"/calendar/dav/\" def protocol = Protocol.getProtocol(\"https\") def pathResolver = new GCalPathResolver() def store = new CalDavCalendarStore(PRODID, host, port, protocol, pathResolver) store.connect(' ', ' '.toCharArray()) def collections = store.collections } collections.each() { println \"${it.description}: ${it.components.size()}\" }","title":"Connecting to a CalDAV Store"},{"location":"indexing/","text":"Calendar Indexing Indexing of components and properties provides a mechanism to improve the performance of component and property retrieval from calendar data. Typically you might use indexing in situations where you are repeatedly inspecting a calendar for components with specific property values and/or properties with specific parameter values. Example An example scenario might be where you have regular updates to input calendar data and need to identify if events in that calendar already exist in a master calendar. As you would be repeatedly inspecting the master calendar for events, it would make sense to index the components in this calendar as follows: IndexedComponentList indexedEvents = new IndexedComponentList(myCalendar.getComponents(Component.VEVENT), Property.UID); Note that we are using the UID property to identify unique events. Now we can use the indexed list to quickly identify if an event exists already as follows: for (Iterator i = inputCalendar.getComponents(Component.VEVENT).iterator(); i.hasNext();) { VEvent event = (VEvent) i.next(); if (indexedEvents.getComponent(event.getUid().getValue()) == null) { myCalendar.getComponents().add(event); } } We should also incorporate checking for modified events as well, which can be achieved by simply comparing two events for equality as follows: for (Iterator i = inputCalendar.getComponents(Component.VEVENT).iterator(); i.hasNext();) { VEvent event = (VEvent) i.next(); Component existing = indexedEvents.getComponent(event.getUid().getValue()); if (existing == null) { myCalendar.getComponents().add(event); } else if (!event.equals(existing)) { // remove existing event and add modified one.. myCalendar.getComponents().remove(existing); myCalendar.getComponents().add(event); } }","title":"Indexing"},{"location":"indexing/#calendar-indexing","text":"Indexing of components and properties provides a mechanism to improve the performance of component and property retrieval from calendar data. Typically you might use indexing in situations where you are repeatedly inspecting a calendar for components with specific property values and/or properties with specific parameter values.","title":"Calendar Indexing"},{"location":"indexing/#example","text":"An example scenario might be where you have regular updates to input calendar data and need to identify if events in that calendar already exist in a master calendar. As you would be repeatedly inspecting the master calendar for events, it would make sense to index the components in this calendar as follows: IndexedComponentList indexedEvents = new IndexedComponentList(myCalendar.getComponents(Component.VEVENT), Property.UID); Note that we are using the UID property to identify unique events. Now we can use the indexed list to quickly identify if an event exists already as follows: for (Iterator i = inputCalendar.getComponents(Component.VEVENT).iterator(); i.hasNext();) { VEvent event = (VEvent) i.next(); if (indexedEvents.getComponent(event.getUid().getValue()) == null) { myCalendar.getComponents().add(event); } } We should also incorporate checking for modified events as well, which can be achieved by simply comparing two events for equality as follows: for (Iterator i = inputCalendar.getComponents(Component.VEVENT).iterator(); i.hasNext();) { VEvent event = (VEvent) i.next(); Component existing = indexedEvents.getComponent(event.getUid().getValue()); if (existing == null) { myCalendar.getComponents().add(event); } else if (!event.equals(existing)) { // remove existing event and add modified one.. myCalendar.getComponents().remove(existing); myCalendar.getComponents().add(event); } }","title":"Example"},{"location":"maven/","text":"Maven Support Releases All iCal4j artifacts may now be found in the maven central repository. To add a dependency add it to your configuration as follows: <project> ... <dependencies> <dependency> <groupId>org.mnode.ical4j</groupId> <artifactId>ical4j</artifactId> <version>1.0.2</version> </dependency> ... </dependencies> ... </project> Snapshots Snapshot releases are also available from the Sonatype Snapshot Repository","title":"Maven"},{"location":"maven/#maven-support","text":"","title":"Maven Support"},{"location":"maven/#releases","text":"All iCal4j artifacts may now be found in the maven central repository. To add a dependency add it to your configuration as follows: <project> ... <dependencies> <dependency> <groupId>org.mnode.ical4j</groupId> <artifactId>ical4j</artifactId> <version>1.0.2</version> </dependency> ... </dependencies> ... </project>","title":"Releases"},{"location":"maven/#snapshots","text":"Snapshot releases are also available from the Sonatype Snapshot Repository","title":"Snapshots"},{"location":"osgi/","text":"iCal4j support for OSGi All iCal4j libraries include metadata for OSGi compatibility. This page outlines some of the ways you may use iCal4j with an OSGi-based solution. Overview TBD. Apache Karaf TBD.","title":"OSGi"},{"location":"osgi/#ical4j-support-for-osgi","text":"All iCal4j libraries include metadata for OSGi compatibility. This page outlines some of the ways you may use iCal4j with an OSGi-based solution.","title":"iCal4j support for OSGi"},{"location":"osgi/#overview","text":"TBD.","title":"Overview"},{"location":"osgi/#apache-karaf","text":"TBD.","title":"Apache Karaf"},{"location":"parser/","text":"iCal4j Parser The iCal4j parsing functionality is designed to allow the use of alternate parser and content handler implementations. net.fortuna.ical4j.data.CalendarParser The CalendarParser interface defines two methods that implementors must provide implementations for. The first method parses data from a java.io.InputStream, whilst the second reads from a java.io.Reader. Both methods must notify the specified ContentHandler by calling the appropriate methods on parse events. The default parser implementation used by iCal4j is the net.fortuna.ical4j.data.CalendarParserImpl . net.fortuna.ical4j.data.ContentHandler Implementors of the ContentHandler interface typically use the parse event notification methods to build a calendar representation (i.e. an object model). The default ContentHandler implementation for iCal4j is the CalendarBuilder. net.fortuna.ical4j.data.CalendarBuilder CalendarBuilder is the default starting point for parsing an iCalendar data stream into an iCal4j object model. A CalendarBuilder instance requires both a CalendarParser (for parsing the data stream) and TimeZoneRegistry instance, however contructors are available that will use default implementations.","title":"Parsing"},{"location":"parser/#ical4j-parser","text":"The iCal4j parsing functionality is designed to allow the use of alternate parser and content handler implementations.","title":"iCal4j Parser"},{"location":"parser/#netfortunaical4jdatacalendarparser","text":"The CalendarParser interface defines two methods that implementors must provide implementations for. The first method parses data from a java.io.InputStream, whilst the second reads from a java.io.Reader. Both methods must notify the specified ContentHandler by calling the appropriate methods on parse events. The default parser implementation used by iCal4j is the net.fortuna.ical4j.data.CalendarParserImpl .","title":"net.fortuna.ical4j.data.CalendarParser"},{"location":"parser/#netfortunaical4jdatacontenthandler","text":"Implementors of the ContentHandler interface typically use the parse event notification methods to build a calendar representation (i.e. an object model). The default ContentHandler implementation for iCal4j is the CalendarBuilder.","title":"net.fortuna.ical4j.data.ContentHandler"},{"location":"parser/#netfortunaical4jdatacalendarbuilder","text":"CalendarBuilder is the default starting point for parsing an iCalendar data stream into an iCal4j object model. A CalendarBuilder instance requires both a CalendarParser (for parsing the data stream) and TimeZoneRegistry instance, however contructors are available that will use default implementations.","title":"net.fortuna.ical4j.data.CalendarBuilder"},{"location":"projects/","text":"Projects using iCal4j The projects listed on this page use iCal4j to provide support for the iCalendar specification. {|style=\"border: 1px solid silver;\" !Name!!Description!!License |- |[Bedework]||A web-based calendar application|| http://www.bedework.org/bedework/update.do?artcenterkey=6 BSD License |- |[Zimbra]||Web-based collaboration suite|| http://zimbra.com/license/collaboration_suite_collective_license_1.0.html Zimbra Collective License |- |[Cosmo]||A CalDAV-based Calendar Server|| http://www.apache.org/licenses/LICENSE-2.0.html Apache Software License |- |[Opencap]||A standards-based Internet Calendaring server|| http://www.apache.org/licenses/LICENSE-2.0.html Apache Software License |- |[Plugin Confluence Calendar Plugin]||Adds Calendar support to Confluence|| http://svn.atlassian.com/fisheye/viewrep/~raw,r=1739/public/contrib/confluence/calendar-plugin/trunk/LICENSE.txt BSD License |- |[FinchSync]||Calendar synchronisation|| http://www.finchsync.com/download.html FinchSync License |- | iCalendar Validator||Validation of iCalendar files||N/A |- |[Webical]||Web based editing of remote iCalendars || http://www.opensource.org/licenses/gpl-license.php GPL |- |[Open Project Services]||Project collaboration platform || http://www.opensource.org/licenses/gpl-license.php GPL |- |[Teamwork]||Project collaboration software|| http://www.opensource.org/licenses/gpl-license.php GPL /commercial |- |[okgo]||A desktop RSS calendar || http://creativecommons.org/licenses/GPL/2.0/ GPL |- | Tate Online||British and international modern and contemporary art||N/A |- |[GCALDaemon]||A calendar synchroniser|| http://gcaldaemon.sourceforge.net/license.html LGPL |- |[Funambol GroupDAV Connector]||GroupDAV sync plugin for Funambol|| http://www.fsf.org/licensing/licenses/agpl-3.0.html AGPLv3 |- |[iCal4p]||A thin wrapper around ical4j for [http://www.processing.org/ processing]|| http://www.opensource.org/licenses/lgpl-license.php GNU LGPL |- |[Scalix]||Linux email, calendaring and messaging|| http://www.scalix.com/community/opensource/licensing.php SPL |- |[Android CalendarIcsAdapter]||Im- and export between ics file and android calendar|| http://www.opensource.org/licenses/gpl-license.php GPL |- |}","title":"Projects using iCal4j"},{"location":"projects/#projects-using-ical4j","text":"The projects listed on this page use iCal4j to provide support for the iCalendar specification. {|style=\"border: 1px solid silver;\" !Name!!Description!!License |- |[Bedework]||A web-based calendar application|| http://www.bedework.org/bedework/update.do?artcenterkey=6 BSD License |- |[Zimbra]||Web-based collaboration suite|| http://zimbra.com/license/collaboration_suite_collective_license_1.0.html Zimbra Collective License |- |[Cosmo]||A CalDAV-based Calendar Server|| http://www.apache.org/licenses/LICENSE-2.0.html Apache Software License |- |[Opencap]||A standards-based Internet Calendaring server|| http://www.apache.org/licenses/LICENSE-2.0.html Apache Software License |- |[Plugin Confluence Calendar Plugin]||Adds Calendar support to Confluence|| http://svn.atlassian.com/fisheye/viewrep/~raw,r=1739/public/contrib/confluence/calendar-plugin/trunk/LICENSE.txt BSD License |- |[FinchSync]||Calendar synchronisation|| http://www.finchsync.com/download.html FinchSync License |- | iCalendar Validator||Validation of iCalendar files||N/A |- |[Webical]||Web based editing of remote iCalendars || http://www.opensource.org/licenses/gpl-license.php GPL |- |[Open Project Services]||Project collaboration platform || http://www.opensource.org/licenses/gpl-license.php GPL |- |[Teamwork]||Project collaboration software|| http://www.opensource.org/licenses/gpl-license.php GPL /commercial |- |[okgo]||A desktop RSS calendar || http://creativecommons.org/licenses/GPL/2.0/ GPL |- | Tate Online||British and international modern and contemporary art||N/A |- |[GCALDaemon]||A calendar synchroniser|| http://gcaldaemon.sourceforge.net/license.html LGPL |- |[Funambol GroupDAV Connector]||GroupDAV sync plugin for Funambol|| http://www.fsf.org/licensing/licenses/agpl-3.0.html AGPLv3 |- |[iCal4p]||A thin wrapper around ical4j for [http://www.processing.org/ processing]|| http://www.opensource.org/licenses/lgpl-license.php GNU LGPL |- |[Scalix]||Linux email, calendaring and messaging|| http://www.scalix.com/community/opensource/licensing.php SPL |- |[Android CalendarIcsAdapter]||Im- and export between ics file and android calendar|| http://www.opensource.org/licenses/gpl-license.php GPL |- |}","title":"Projects using iCal4j"},{"location":"recurrences/","text":"iCal4j Recurrence Support Events that occur more than once are supported in the iCalendar specification, and are defined by either a sequence of dates (RDATE) or a recurrence rule (RRULE). Recurrence (RRULE) Examples Below are some examples of how to represent recurring events using the RRULE format: A rule occurring on the third Sunday of April would be as follows: RRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=SU;BYSETPOS=3 An event occurring on the first and second Monday of October would be specified by the rule: RRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=MO;BYSETPOS=1,2 Event that repeats monthly: every 29th of every other month! RRULE:FREQ=MONTHLY;INTERVAL=2;BYMONTHDAY=29 NOTE: As February does not have 29 days in non-leap years, this rule would potentially have a gap between December of the previous year and April of the current year. For this reason it makes more sense to use negative SETPOS values when you need to specify the end of a month. Event that repeats monthly: every last Sunday of every 3 months RRULE:FREQ=MONTHLY;INTERVAL=3;BYDAY=SU;BYSETPOS=-1 Event that repeats monthly: every fourth Sunday of every 3 months RRULE:FREQ=MONTHLY;INTERVAL=3;BYDAY=SU;BYSETPOS=4 Event that repeats yearly: every 5th of February: RRULE:FREQ=YEARLY;BYMONTH=2;BYDAY=5","title":"Recurrences"},{"location":"recurrences/#ical4j-recurrence-support","text":"Events that occur more than once are supported in the iCalendar specification, and are defined by either a sequence of dates (RDATE) or a recurrence rule (RRULE).","title":"iCal4j Recurrence Support"},{"location":"recurrences/#recurrence-rrule-examples","text":"Below are some examples of how to represent recurring events using the RRULE format: A rule occurring on the third Sunday of April would be as follows: RRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=SU;BYSETPOS=3 An event occurring on the first and second Monday of October would be specified by the rule: RRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=MO;BYSETPOS=1,2 Event that repeats monthly: every 29th of every other month! RRULE:FREQ=MONTHLY;INTERVAL=2;BYMONTHDAY=29 NOTE: As February does not have 29 days in non-leap years, this rule would potentially have a gap between December of the previous year and April of the current year. For this reason it makes more sense to use negative SETPOS values when you need to specify the end of a month. Event that repeats monthly: every last Sunday of every 3 months RRULE:FREQ=MONTHLY;INTERVAL=3;BYDAY=SU;BYSETPOS=-1 Event that repeats monthly: every fourth Sunday of every 3 months RRULE:FREQ=MONTHLY;INTERVAL=3;BYDAY=SU;BYSETPOS=4 Event that repeats yearly: every 5th of February: RRULE:FREQ=YEARLY;BYMONTH=2;BYDAY=5","title":"Recurrence (RRULE) Examples"},{"location":"resources/","text":"iCal4j Resources Project Home API Documentation Support Forums License Download Releases Snapshot Builds Getting Started [Slides] from a recent presentation at the http://calconnect.org CalConnect Roundtable XIV. Resources Information regarding code coverage and other project reports is available in the Project Documentation . For information regarding specification support, please see the [Compliance]]([Compliance|RFC) page. Outstanding [Bugs] and https://sourceforge.net/tracker2/?group_id=107024&atid=646397 Patches Related Sites and Articles [User Agents]]([CUAs|Calendar) supporting the iCalendar specification [[Projects]] using iCal4j iCalendar feeds using iCal4j Integrate your Java agenda and iCalendar clients (Outlook) with iCal4j [Wikipedia] on http://en.wikipedia.org/wiki/ICalendar iCalendar . iCalendar to XML conversion using ical4j MSDN iCalendar Extensions","title":"Resources"},{"location":"resources/#ical4j-resources","text":"Project Home API Documentation Support Forums License","title":"iCal4j Resources"},{"location":"resources/#download","text":"Releases Snapshot Builds","title":"Download"},{"location":"resources/#getting-started","text":"[Slides] from a recent presentation at the http://calconnect.org CalConnect Roundtable XIV.","title":"Getting Started"},{"location":"resources/#resources","text":"Information regarding code coverage and other project reports is available in the Project Documentation . For information regarding specification support, please see the [Compliance]]([Compliance|RFC) page. Outstanding [Bugs] and https://sourceforge.net/tracker2/?group_id=107024&atid=646397 Patches","title":"Resources"},{"location":"resources/#related-sites-and-articles","text":"[User Agents]]([CUAs|Calendar) supporting the iCalendar specification [[Projects]] using iCal4j iCalendar feeds using iCal4j Integrate your Java agenda and iCalendar clients (Outlook) with iCal4j [Wikipedia] on http://en.wikipedia.org/wiki/ICalendar iCalendar . iCalendar to XML conversion using ical4j MSDN iCalendar Extensions","title":"Related Sites and Articles"},{"location":"rfcs/","text":"Supported specifications This page outlines iCalendar specifications supported by iCal4j. Overview iCalendar is a collection of specifications that define a set of rules and data formats to be implemented by a Calendar User Agent (CUA). Implementation of these specifications should provide a CUA with the ability to interact with other CUAs via calendaring and scheduling workflows. References RFC5545 - Internet Calendaring and Scheduling Core Object Specification (iCalendar) RFC5546 - iCalendar Transport-Independent Interoperability Protocol (iTIP) RFC6047 - iCalendar Message-Based Interoperability Protocol (iMIP) RFC6868 - Parameter Value Encoding in iCalendar and vCard RFC7953 - Calendar Availability RFC7986 - New Properties for iCalendar RFC7529 - Non-Gregorian Recurrence Rules in iCalendar RFC9073 - Event Publishing Extensions to iCalendar RFC9074 - \"VALARM\" Extensions for iCalendar","title":"RFC Compliance"},{"location":"rfcs/#supported-specifications","text":"This page outlines iCalendar specifications supported by iCal4j.","title":"Supported specifications"},{"location":"rfcs/#overview","text":"iCalendar is a collection of specifications that define a set of rules and data formats to be implemented by a Calendar User Agent (CUA). Implementation of these specifications should provide a CUA with the ability to interact with other CUAs via calendaring and scheduling workflows.","title":"Overview"},{"location":"rfcs/#references","text":"RFC5545 - Internet Calendaring and Scheduling Core Object Specification (iCalendar) RFC5546 - iCalendar Transport-Independent Interoperability Protocol (iTIP) RFC6047 - iCalendar Message-Based Interoperability Protocol (iMIP) RFC6868 - Parameter Value Encoding in iCalendar and vCard RFC7953 - Calendar Availability RFC7986 - New Properties for iCalendar RFC7529 - Non-Gregorian Recurrence Rules in iCalendar RFC9073 - Event Publishing Extensions to iCalendar RFC9074 - \"VALARM\" Extensions for iCalendar","title":"References"},{"location":"roadmap/","text":"iCal4j Roadmap This roadmap outlines the proposed release intentions for iCal4j. This roadmap is subject to change - frequently! :) 1.0 - Full support for the RFC2445 (iCalendar) specification. Supports Java 1.4.2 and later. 1.1 - Full support for the RFC2446 (iTIP) specification. Supports Java 1.4.2 and later. 2.0 - Full support for the RFC2447 (iMIP) specification. Supports Java 5 and later.","title":"Roadmap"},{"location":"roadmap/#ical4j-roadmap","text":"This roadmap outlines the proposed release intentions for iCal4j. This roadmap is subject to change - frequently! :) 1.0 - Full support for the RFC2445 (iCalendar) specification. Supports Java 1.4.2 and later. 1.1 - Full support for the RFC2446 (iTIP) specification. Supports Java 1.4.2 and later. 2.0 - Full support for the RFC2447 (iMIP) specification. Supports Java 5 and later.","title":"iCal4j Roadmap"},{"location":"templates/","text":"iCal4j Templates iCal4j Templates provide prototypes and custom validation for common iCalendar and vCard use-cases. Overview Whilst iCalendar and vCard specification provide general component and property constraints, some applications may require further constraints to fulfill the requirements of the use-case. iCal4j Templates provides some opinionated prototyping and validation for common use-cases, and a portable definition language for constructing your own. Anniversary A common use-case for VEVENT components is to define anniversary-style events (i.e. recurring, date-based, etc.). DTSTART - VALUE=DATE RRULE/RDATE (required) Roster A roster is a VCALENDAR prototype consisting of VTODO components with one or more ATTENDEE s. Sports fixture A sport fixture is a VCALENDAR prototype of VEVENT components with a LOCATION and embedded Schema.org STRUCTURED-DATA . Timetable A timetable is a VCALENDAR prototype of VEVENT components. Timesheet A timesheet is a VCALENDAR prototype of VJOURNAL components. Meeting A meeting is a VCALENDAR prototype of VEVENT components. Meeting Minutes Meeting minutes is a VJOURNAL prototype with RELATED-TO property referencing the meeting. Project Task A project task is a VTODO prototype. Project Schedule A project schedule is a VCALENDAR prototype of VTODO and VEVENT components representing tasks and milestones.","title":"iCal4j Templates"},{"location":"templates/#ical4j-templates","text":"iCal4j Templates provide prototypes and custom validation for common iCalendar and vCard use-cases.","title":"iCal4j Templates"},{"location":"templates/#overview","text":"Whilst iCalendar and vCard specification provide general component and property constraints, some applications may require further constraints to fulfill the requirements of the use-case. iCal4j Templates provides some opinionated prototyping and validation for common use-cases, and a portable definition language for constructing your own.","title":"Overview"},{"location":"templates/#anniversary","text":"A common use-case for VEVENT components is to define anniversary-style events (i.e. recurring, date-based, etc.). DTSTART - VALUE=DATE RRULE/RDATE (required)","title":"Anniversary"},{"location":"templates/#roster","text":"A roster is a VCALENDAR prototype consisting of VTODO components with one or more ATTENDEE s.","title":"Roster"},{"location":"templates/#sports-fixture","text":"A sport fixture is a VCALENDAR prototype of VEVENT components with a LOCATION and embedded Schema.org STRUCTURED-DATA .","title":"Sports fixture"},{"location":"templates/#timetable","text":"A timetable is a VCALENDAR prototype of VEVENT components.","title":"Timetable"},{"location":"templates/#timesheet","text":"A timesheet is a VCALENDAR prototype of VJOURNAL components.","title":"Timesheet"},{"location":"templates/#meeting","text":"A meeting is a VCALENDAR prototype of VEVENT components.","title":"Meeting"},{"location":"templates/#meeting-minutes","text":"Meeting minutes is a VJOURNAL prototype with RELATED-TO property referencing the meeting.","title":"Meeting Minutes"},{"location":"templates/#project-task","text":"A project task is a VTODO prototype.","title":"Project Task"},{"location":"templates/#project-schedule","text":"A project schedule is a VCALENDAR prototype of VTODO and VEVENT components representing tasks and milestones.","title":"Project Schedule"},{"location":"timezones/","text":"iCal4j TimeZone Support iCal4j provides it's own TimeZone implementation as opposed to using the default Java timezone implementation. This is to ensure that all timezones in iCal4j can be accurately represented using a VTIMEZONE component in calendar data. The iCal4j timezone is essentially an implementation of java.util.TimeZone that is backed by a net.fortuna.ical4j.component.VTimeZone instance. Whilst a timezone instance may be created explicitly, typical usage is to obtain a TimeZoneRegistry instance and retrieve the timezone instance from the registry. TimeZoneRegistry The iCal4j TimeZoneRegistry is a repository for instance of net.fortuna.ical4j.model.TimeZone , which are essentially implementations of java.util.TimeZone that are backed by a VTIMEZONE definition. The registry concept allows for the use of a different set of timezone definitions depending on the situation. A custom TimeZoneRegistry implementation may also be provided to replace the default implementation. This may be required in situations where you maintain a common set of timezone definitions in a database or some other backing store. To specify an alternate implementation you need to implement a TimeZoneRegistryFactory and specify it via the following system property: net.fortuna.ical4j.timezone.registry=<custom_factory_classname> Loading registry data To access timezone information provided in calendar form, you must first initialise a timezone registry with the data provided. This initialisation process is performed automatically when using the net.fortuna.ical4j.data.CalendarBuilder to load calendar data, such that obtaining an initialised registry is quite simple: CalendarBuilder builder = new CalendarBuilder(); Calendar calendar = builder.build(new FileInputStream(\"mycalendar.ics\")); TimeZoneRegistry registry = builder.getRegistry(); TimeZone data is then retrievable as follows: TimeZone tz = registry.getTimeZone(\"Australia/Melbourne\"); NOTE: If a timezone with the specified identifier is not available in the registry instance an attempt is made to load a timezone from the default ZoneInfo data included with iCal4j. Referencing the default registry In scenarios where you need to generate new iCalendar data and are required to explicitly specify timezone information you would need a reference to the default timezone registry. You do this by creating a new registry instance, but not loading any timezone data as follows: TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry(); To add a VTimeZone definition to your calendar you would do something like this: VTimeZone tz = registry.getTimeZone(\"Australia/Melbourne\").getVTimeZone(); calendar.getComponents().add(tz); ZoneInfo iCal4j includes a set of timezone definitions based on the latest [Olson database] http://en.wikipedia.org/wiki/Zoneinfo ZoneInfo data. These definitions are used by iCal4j for both interpreting calendar data that does not explicitly specify timezone information, and to include timezone information when generating new calendar data. Note that if a timezone is provided in the calendar data it will always take precedence over the built-in definitions. Four different sets of timezone data are provided as follows: etc/zoneinfo - timezone data that uses common timezone identifiers (e.g. \"Australia/Melbourne\") (default) etc/zoneinfo-outlook - timezone data that is compatible with MS Outlook, and uses common timezone identifiers etc/zoneinfo-global - timezone data that uses globally-unique timezone identifiers (e.g. \"/ical4j_1_0/Australia/Melbourne\") etc/zoneinfo-outlook-global - timezone data that is compatible with MS Outlook, and uses globally-unique timezone identifiers To use a zoneinfo set other than the default you will need to create a TimeZoneRegistryImpl instance as follows: TimeZoneRegistry registry = new TimeZoneRegistryImpl(\"zoneinfo-outlook/\") TzUrl These timezone definitions are generated using tzurl - a fork of the vzic tool that now appears to be inactive (?). As of 1.0-rc2 iCal4j will include support for automatically updating the built-in timezone definitions from the tzurl.org site. In some cases this functionality may be undesirable (e.g. applications without Internet access), and as such automatic updating may be disabled by specifying the following directive in the ical4j.properties file or as a System property: net.fortuna.ical4j.timezone.update.enabled=false NOTE: It is recommend that you create a custom TimeZoneRegistryFactory, as described above, to create such a TimeZoneRegistryImpl instance Creating events with timezones When creating Events, make sure, that you properly set the time zone within the DateTime object: TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry(); TimeZone timezone = registry.getTimeZone(\"Europe/Berlin\"); VTimeZone tz = timezone.getVTimeZone(); [..] DateTime start = new DateTime(startDate, timezone); DateTime end = new DateTime(endDate, timezone); VEvent meeting = new VEvent(start, end, \"text\");","title":"Timezones"},{"location":"timezones/#ical4j-timezone-support","text":"iCal4j provides it's own TimeZone implementation as opposed to using the default Java timezone implementation. This is to ensure that all timezones in iCal4j can be accurately represented using a VTIMEZONE component in calendar data. The iCal4j timezone is essentially an implementation of java.util.TimeZone that is backed by a net.fortuna.ical4j.component.VTimeZone instance. Whilst a timezone instance may be created explicitly, typical usage is to obtain a TimeZoneRegistry instance and retrieve the timezone instance from the registry.","title":"iCal4j TimeZone Support"},{"location":"timezones/#timezoneregistry","text":"The iCal4j TimeZoneRegistry is a repository for instance of net.fortuna.ical4j.model.TimeZone , which are essentially implementations of java.util.TimeZone that are backed by a VTIMEZONE definition. The registry concept allows for the use of a different set of timezone definitions depending on the situation. A custom TimeZoneRegistry implementation may also be provided to replace the default implementation. This may be required in situations where you maintain a common set of timezone definitions in a database or some other backing store. To specify an alternate implementation you need to implement a TimeZoneRegistryFactory and specify it via the following system property: net.fortuna.ical4j.timezone.registry=<custom_factory_classname>","title":"TimeZoneRegistry"},{"location":"timezones/#loading-registry-data","text":"To access timezone information provided in calendar form, you must first initialise a timezone registry with the data provided. This initialisation process is performed automatically when using the net.fortuna.ical4j.data.CalendarBuilder to load calendar data, such that obtaining an initialised registry is quite simple: CalendarBuilder builder = new CalendarBuilder(); Calendar calendar = builder.build(new FileInputStream(\"mycalendar.ics\")); TimeZoneRegistry registry = builder.getRegistry(); TimeZone data is then retrievable as follows: TimeZone tz = registry.getTimeZone(\"Australia/Melbourne\"); NOTE: If a timezone with the specified identifier is not available in the registry instance an attempt is made to load a timezone from the default ZoneInfo data included with iCal4j.","title":"Loading registry data"},{"location":"timezones/#referencing-the-default-registry","text":"In scenarios where you need to generate new iCalendar data and are required to explicitly specify timezone information you would need a reference to the default timezone registry. You do this by creating a new registry instance, but not loading any timezone data as follows: TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry(); To add a VTimeZone definition to your calendar you would do something like this: VTimeZone tz = registry.getTimeZone(\"Australia/Melbourne\").getVTimeZone(); calendar.getComponents().add(tz);","title":"Referencing the default registry"},{"location":"timezones/#zoneinfo","text":"iCal4j includes a set of timezone definitions based on the latest [Olson database] http://en.wikipedia.org/wiki/Zoneinfo ZoneInfo data. These definitions are used by iCal4j for both interpreting calendar data that does not explicitly specify timezone information, and to include timezone information when generating new calendar data. Note that if a timezone is provided in the calendar data it will always take precedence over the built-in definitions. Four different sets of timezone data are provided as follows: etc/zoneinfo - timezone data that uses common timezone identifiers (e.g. \"Australia/Melbourne\") (default) etc/zoneinfo-outlook - timezone data that is compatible with MS Outlook, and uses common timezone identifiers etc/zoneinfo-global - timezone data that uses globally-unique timezone identifiers (e.g. \"/ical4j_1_0/Australia/Melbourne\") etc/zoneinfo-outlook-global - timezone data that is compatible with MS Outlook, and uses globally-unique timezone identifiers To use a zoneinfo set other than the default you will need to create a TimeZoneRegistryImpl instance as follows: TimeZoneRegistry registry = new TimeZoneRegistryImpl(\"zoneinfo-outlook/\")","title":"ZoneInfo"},{"location":"timezones/#tzurl","text":"These timezone definitions are generated using tzurl - a fork of the vzic tool that now appears to be inactive (?). As of 1.0-rc2 iCal4j will include support for automatically updating the built-in timezone definitions from the tzurl.org site. In some cases this functionality may be undesirable (e.g. applications without Internet access), and as such automatic updating may be disabled by specifying the following directive in the ical4j.properties file or as a System property: net.fortuna.ical4j.timezone.update.enabled=false NOTE: It is recommend that you create a custom TimeZoneRegistryFactory, as described above, to create such a TimeZoneRegistryImpl instance","title":"TzUrl"},{"location":"timezones/#creating-events-with-timezones","text":"When creating Events, make sure, that you properly set the time zone within the DateTime object: TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry(); TimeZone timezone = registry.getTimeZone(\"Europe/Berlin\"); VTimeZone tz = timezone.getVTimeZone(); [..] DateTime start = new DateTime(startDate, timezone); DateTime end = new DateTime(endDate, timezone); VEvent meeting = new VEvent(start, end, \"text\");","title":"Creating events with timezones"},{"location":"validation/","text":"iCal4j Validation iCal4j includes a comprehensive validation framework for checking compliance with the various iCalendar specifications. This framework may also be used to implement custom validation rules to support data validation for specific use-cases. Overview The iCal4j Validation framework is based on the concept of apply a collection of validation rules to a target iCalendar object and capturing the results of these rules. Validation Rule A validation rule defines a set of constraints to apply when validating a target, and reporting constructs if the target does not meet those constraints. Validation Type - collection or predicate-based check of target, including a description used for reporting Instances - zero or more inputs to validation checks Severity - reporting severity when a check fails (e.g. Warning, Error, etc.) Validation RuleSet A rule set combines a group of rules and a context in which to apply them. You may have different rules for Calendar properties, components, and properties nested within each component. Rules - a set of validation rules to apply to the context target Context - a target context provides an identifier for the target type used for reporting Validation Entry A validation entry is used to report the result of a validation check, where validation rule requirements are not met. Message - a message reporting the nature of the failure Severity - records the severity of the validation check failure Context - captures the context of the validation check Validation Result A validation result collates validation entries from a target validation, which may include application of one or more validation rule sets. Results may be used to summarise or take action based on the validation outcome. Entries - a list of validation entries resulting from a target validation ... Validator A validator is a concrete implementation that encapsulates rule sets applied to a specific target type. Rule sets - a collection of rule sets to apply to the target ...","title":"Validation"},{"location":"validation/#ical4j-validation","text":"iCal4j includes a comprehensive validation framework for checking compliance with the various iCalendar specifications. This framework may also be used to implement custom validation rules to support data validation for specific use-cases.","title":"iCal4j Validation"},{"location":"validation/#overview","text":"The iCal4j Validation framework is based on the concept of apply a collection of validation rules to a target iCalendar object and capturing the results of these rules.","title":"Overview"},{"location":"validation/#validation-rule","text":"A validation rule defines a set of constraints to apply when validating a target, and reporting constructs if the target does not meet those constraints. Validation Type - collection or predicate-based check of target, including a description used for reporting Instances - zero or more inputs to validation checks Severity - reporting severity when a check fails (e.g. Warning, Error, etc.)","title":"Validation Rule"},{"location":"validation/#validation-ruleset","text":"A rule set combines a group of rules and a context in which to apply them. You may have different rules for Calendar properties, components, and properties nested within each component. Rules - a set of validation rules to apply to the context target Context - a target context provides an identifier for the target type used for reporting","title":"Validation RuleSet"},{"location":"validation/#validation-entry","text":"A validation entry is used to report the result of a validation check, where validation rule requirements are not met. Message - a message reporting the nature of the failure Severity - records the severity of the validation check failure Context - captures the context of the validation check","title":"Validation Entry"},{"location":"validation/#validation-result","text":"A validation result collates validation entries from a target validation, which may include application of one or more validation rule sets. Results may be used to summarise or take action based on the validation outcome. Entries - a list of validation entries resulting from a target validation ...","title":"Validation Result"},{"location":"validation/#validator","text":"A validator is a concrete implementation that encapsulates rule sets applied to a specific target type. Rule sets - a collection of rule sets to apply to the target ...","title":"Validator"},{"location":"vcard/","text":"iCal4j vCard iCal4j vCard is a Java library that provides support for the vCard specification as defined by draft-ietf-vcarddav-vcardrev-06 . Minimum requirements iCal4j vCard requires a minimum of Java 5 due to the use of features introduced in this version. If you need to run on an earlier version of Java, consider using Retroweaver . Project Information Project Home Javadocs Download Releases Alternative vCard implementations vCard4j mime-dir-j (inactive) Card Me (inactive) References VCardDAV.org","title":"iCal4j vCard"},{"location":"vcard/#ical4j-vcard","text":"iCal4j vCard is a Java library that provides support for the vCard specification as defined by draft-ietf-vcarddav-vcardrev-06 .","title":"iCal4j vCard"},{"location":"vcard/#minimum-requirements","text":"iCal4j vCard requires a minimum of Java 5 due to the use of features introduced in this version. If you need to run on an earlier version of Java, consider using Retroweaver .","title":"Minimum requirements"},{"location":"vcard/#project-information","text":"Project Home Javadocs","title":"Project Information"},{"location":"vcard/#download","text":"Releases","title":"Download"},{"location":"vcard/#alternative-vcard-implementations","text":"vCard4j mime-dir-j (inactive) Card Me (inactive)","title":"Alternative vCard implementations"},{"location":"vcard/#references","text":"VCardDAV.org","title":"References"},{"location":"zoneinfo-outlook/","text":"iCal4j ZoneInfo Outlook iCal4j ZoneInfo Outlook provides alternate timezone definitions that may provide greater compatibility with certain versions of Microsoft Outlook. Usage To use the alternate timezone definitions you may create a custom TimeZoneRegistry instance using the applicable prefix: CalendarParser parser = CalendarParserFactory.getInstance().createParser(); PropertyFactoryRegistry propertyFactoryRegistry = new PropertyFactoryRegistry(); propertyFactoryRegistry.register(WrTimezone.PROPERTY_NAME, WrTimezone.FACTORY); propertyFactoryRegistry.register(WrCalName.PROPERTY_NAME, WrCalName.FACTORY); ParameterFactoryRegistry parameterFactoryRegistry = new ParameterFactoryRegistry(); TimeZoneRegistry tzRegistry = new TimeZoneRegistryImpl(\"zoneinfo-outlook/\"); builder = new CalendarBuilder(parser, propertyFactoryRegistry, parameterFactoryRegistry, tzRegistry); A convenient factory for the Outlook-compatible definitions is also provided, so in such cases all you need to do is add the following property to your ical4j.properties included in your classpath: net.fortuna.ical4j.timezone.registry=net.fortuna.ical4j.zoneinfo.outlook.OutlookTimeZoneRegistryFactory Minimum requirements None. Project Information Project Home Javadocs Download Releases","title":"iCal4j ZoneInfo Outlook"},{"location":"zoneinfo-outlook/#ical4j-zoneinfo-outlook","text":"iCal4j ZoneInfo Outlook provides alternate timezone definitions that may provide greater compatibility with certain versions of Microsoft Outlook.","title":"iCal4j ZoneInfo Outlook"},{"location":"zoneinfo-outlook/#usage","text":"To use the alternate timezone definitions you may create a custom TimeZoneRegistry instance using the applicable prefix: CalendarParser parser = CalendarParserFactory.getInstance().createParser(); PropertyFactoryRegistry propertyFactoryRegistry = new PropertyFactoryRegistry(); propertyFactoryRegistry.register(WrTimezone.PROPERTY_NAME, WrTimezone.FACTORY); propertyFactoryRegistry.register(WrCalName.PROPERTY_NAME, WrCalName.FACTORY); ParameterFactoryRegistry parameterFactoryRegistry = new ParameterFactoryRegistry(); TimeZoneRegistry tzRegistry = new TimeZoneRegistryImpl(\"zoneinfo-outlook/\"); builder = new CalendarBuilder(parser, propertyFactoryRegistry, parameterFactoryRegistry, tzRegistry); A convenient factory for the Outlook-compatible definitions is also provided, so in such cases all you need to do is add the following property to your ical4j.properties included in your classpath: net.fortuna.ical4j.timezone.registry=net.fortuna.ical4j.zoneinfo.outlook.OutlookTimeZoneRegistryFactory","title":"Usage"},{"location":"zoneinfo-outlook/#minimum-requirements","text":"None.","title":"Minimum requirements"},{"location":"zoneinfo-outlook/#project-information","text":"Project Home Javadocs","title":"Project Information"},{"location":"zoneinfo-outlook/#download","text":"Releases","title":"Download"},{"location":"examples/","text":"iCal4j Examples This page provides examples that demonstrate how to use iCal4j effectively. Parsing iCalendar Files Building iCal4j Model Generating Output Calculating Recurrences Filtering Components VCard Model","title":"Overview"},{"location":"examples/#ical4j-examples","text":"This page provides examples that demonstrate how to use iCal4j effectively. Parsing iCalendar Files Building iCal4j Model Generating Output Calculating Recurrences Filtering Components VCard Model","title":"iCal4j Examples"},{"location":"examples/filter/","text":"iCal4j Examples - Filtering This page provides examples of using iCal4j to filter iCal4j objects. Filtering events The correct way to filter events according to the spec (RFC2445) would be to construct a VFREEBUSY request that represents the properties of events that you are interested in. You would then pass this request as an argument to the constructor of a new VFREEBUSY, along with the list of components (events) you want to inspect to derive a VFREEBUSY instance that represents the consumed/free time based on the specified events (see the API Documentation for more information). If instead you would like to identify specific events occurring within a time frame, you can use iCal4j filters to filter components within a specified period. For example, to filter a list of events only occurring today you might do the following: java.util.Calendar today = java.util.Calendar.getInstance(); today.set(java.util.Calendar.HOUR_OF_DAY, 0); today.clear(java.util.Calendar.MINUTE); today.clear(java.util.Calendar.SECOND); // create a period starting now with a duration of one (1) day.. Period period = new Period(new DateTime(today.getTime()), new Dur(1, 0, 0, 0)); Filter filter = new Filter(new PeriodRule(period)); List eventsToday = filter.filter(calendar.getComponents(Component.VEVENT));","title":"Filtering"},{"location":"examples/filter/#ical4j-examples-filtering","text":"This page provides examples of using iCal4j to filter iCal4j objects.","title":"iCal4j Examples - Filtering"},{"location":"examples/filter/#filtering-events","text":"The correct way to filter events according to the spec (RFC2445) would be to construct a VFREEBUSY request that represents the properties of events that you are interested in. You would then pass this request as an argument to the constructor of a new VFREEBUSY, along with the list of components (events) you want to inspect to derive a VFREEBUSY instance that represents the consumed/free time based on the specified events (see the API Documentation for more information). If instead you would like to identify specific events occurring within a time frame, you can use iCal4j filters to filter components within a specified period. For example, to filter a list of events only occurring today you might do the following: java.util.Calendar today = java.util.Calendar.getInstance(); today.set(java.util.Calendar.HOUR_OF_DAY, 0); today.clear(java.util.Calendar.MINUTE); today.clear(java.util.Calendar.SECOND); // create a period starting now with a duration of one (1) day.. Period period = new Period(new DateTime(today.getTime()), new Dur(1, 0, 0, 0)); Filter filter = new Filter(new PeriodRule(period)); List eventsToday = filter.filter(calendar.getComponents(Component.VEVENT));","title":"Filtering events"},{"location":"examples/model/","text":"iCal4j Examples - Model This page provides examples of using the iCal4j model to build iCalendar objects. Creating a new calendar Calendar calendar = new Calendar(); calendar.getProperties().add(new ProdId(\"-//Ben Fortuna//iCal4j 1.0//EN\")); calendar.getProperties().add(Version.VERSION_2_0); calendar.getProperties().add(CalScale.GREGORIAN); // Add events, etc.. calendar.getComponents().add(...); Output: BEGIN:VCALENDAR PRODID:-//Ben Fortuna//iCal4j 1.0//EN VERSION:2.0 CALSCALE:GREGORIAN END:VCALENDAR Creating a calendar with the fluent API The recent addition of a fluent API means we can also write the above example more succinctly: Calendar calendar = new Calendar().withProdId(\"-//Ben Fortuna//iCal4j 1.0//EN\") .withDefaults().getFluentTarget(); // Add events, etc.. calendar = calendar.withComponent(...).getFluentTarget(); Creating an all day event java.util.Calendar calendar = java.util.Calendar.getInstance(); calendar.set(java.util.Calendar.MONTH, java.util.Calendar.DECEMBER); calendar.set(java.util.Calendar.DAY_OF_MONTH, 25); // initialise as an all-day event.. VEvent christmas = new VEvent(new Date(calendar.getTime()), \"Christmas Day\"); // Generate a UID for the event.. UidGenerator ug = new UidGenerator(\"1\"); christmas.getProperties().add(ug.generateUid()); net.fortuna.ical4j.model.Calendar cal = new net.fortuna.ical4j.model.Calendar(); cal.getComponents().add(christmas); Using fluent API: ... net.fortuna.ical4j.model.Calendar cal = new net.fortuna.ical4j.model.Calendar() .withComponent( new VEvent(new Date(calendar.getTime()), \"Christmas Day\") .withProperty(ug.generateUid()).getFluentTarget()).getFluentTarget(); Output: BEGIN:VEVENT DTSTAMP:20050222T044240Z DTSTART;VALUE=DATE:20051225 SUMMARY:Christmas Day UID:20050222T044240Z-1@example.com END:VEVENT Creating a meeting of four hour duration // Create a TimeZone TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry(); TimeZone timezone = registry.getTimeZone(\"America/Mexico_City\"); VTimeZone tz = timezone.getVTimeZone(); // Start Date is on: April 1, 2008, 9:00 am java.util.Calendar startDate = new GregorianCalendar(); startDate.setTimeZone(timezone); startDate.set(java.util.Calendar.MONTH, java.util.Calendar.APRIL); startDate.set(java.util.Calendar.DAY_OF_MONTH, 1); startDate.set(java.util.Calendar.YEAR, 2008); startDate.set(java.util.Calendar.HOUR_OF_DAY, 9); startDate.set(java.util.Calendar.MINUTE, 0); startDate.set(java.util.Calendar.SECOND, 0); // End Date is on: April 1, 2008, 13:00 java.util.Calendar endDate = new GregorianCalendar(); endDate.setTimeZone(timezone); endDate.set(java.util.Calendar.MONTH, java.util.Calendar.APRIL); endDate.set(java.util.Calendar.DAY_OF_MONTH, 1); endDate.set(java.util.Calendar.YEAR, 2008); endDate.set(java.util.Calendar.HOUR_OF_DAY, 13); endDate.set(java.util.Calendar.MINUTE, 0); endDate.set(java.util.Calendar.SECOND, 0); // Create the event String eventName = \"Progress Meeting\"; DateTime start = new DateTime(startDate.getTime()); DateTime end = new DateTime(endDate.getTime()); VEvent meeting = new VEvent(start, end, eventName); // add timezone info.. meeting.getProperties().add(tz.getTimeZoneId()); // generate unique identifier.. UidGenerator ug = new UidGenerator(\"uidGen\"); Uid uid = ug.generateUid(); meeting.getProperties().add(uid); // add attendees.. Attendee dev1 = new Attendee(URI.create(\"mailto:dev1@mycompany.com\")); dev1.getParameters().add(Role.REQ_PARTICIPANT); dev1.getParameters().add(new Cn(\"Developer 1\")); meeting.getProperties().add(dev1); Attendee dev2 = new Attendee(URI.create(\"mailto:dev2@mycompany.com\")); dev2.getParameters().add(Role.OPT_PARTICIPANT); dev2.getParameters().add(new Cn(\"Developer 2\")); meeting.getProperties().add(dev2); // Create a calendar net.fortuna.ical4j.model.Calendar icsCalendar = new net.fortuna.ical4j.model.Calendar(); icsCalendar.getProperties().add(new ProdId(\"-//Events Calendar//iCal4j 1.0//EN\")); icsCalendar.getProperties().add(CalScale.GREGORIAN); // Add the event and print icsCalendar.getComponents().add(meeting); System.out.println(icsCalendar); Using the fluent API: ... VEvent meeting = new VEvent(start, end, eventName) .withProperty(tz.getTimeZoneId()) .withProperty(ug.generateUid()) .withProperty( new Attendee(URI.create(\"mailto:dev1@mycompany.com\")) .withParameter(Role.REQ_PARTICIPANT) .withParameter(new Cn(\"Developer 1\").getFluentTarget()) .getFluentTarget()) .withProperty( new Attendee(URI.create(\"mailto:dev2@mycompany.com\")) .withParameter(Role.OPT_PARTICIPANT) .withParameter(new Cn(\"Developer 2\").getFluentTarget()) .getFluentTarget()) .getFluentTarget(); net.fortuna.ical4j.model.Calendar icsCalendar = new net.fortuna.ical4j.model.Calendar() .withProdId(\"-//Events Calendar//iCal4j 1.0//EN\") .withDefaults() .withComponent(meeting) .getFluentTarget(); System.out.println(icsCalendar); Attaching binary data FileInputStream fin = new FileInputStream(\"etc/artwork/logo.png\"); ByteArrayOutputStream bout = new ByteArrayOutputStream(); for (int i = fin.read(); i >= 0;) { bout.write(i); i = fin.read(); } ParameterList params = new ParameterList(); params.add(Value.BINARY); params.add(Encoding.BASE64); Attach attach = new Attach(params, bout.toByteArray()); Output: ATTACH;ENCODING=BASE64;VALUE=BINARY:iVBORw0KGgoAAAANSUhEUgAAAUYAAACJCAYAA ABQHpElAAAABHNCSVQICAgIfAhkiAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ 5vuPBoAABPKSURBVHic7d15tFX1dcDx72aQyQkMqAiIojjFASc0GmOlRqKmcR6XpkaJYtrU1 LYSp0ZZqxo1SZ2CUZPGqlXRGEdAqzKoqGjqCKgoVFF8DkVEBJRh9499HiGXB /ec3/nnN89d 3/WOmvx9J599r3vvf3O8Pvtn6gqzrkaiGwPzCw6jTZsjmrLqq9ERgGXFZdOmyajeuCqr0QOB ... HTML Support Starting with Outlook 2010, Outlook can now recognize HTML formatted content in an iCalendar. Here are the steps to add an alternate description in HTML with ical4j: Create a ParameterList containing a XParameter(\"FMTTYPE\", \"text/html\"). Create a XProperty with name \"X-ALT-DESC\", FMTTYPE parameterList and html. Add the XProperty to your VEvent. Example code: HostInfo hostInfo = new SimpleHostInfo(\"myHostName\"); UidGenerator ug = new UidGenerator(hostInfo, \"1\"); TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry(); VTimeZone tz = registry.getTimeZone(\"US/Eastern\").getVTimeZone(); TzId tzParam = new TzId(tz.getProperties().getProperty(Property.TZID).getValue()); Calendar iCalendar = new Calendar().withProdId(\"-//MyCalendarApp v1.0//EN\") .withDefaults().withComponent(tz); //Outlook uses a custom property to display HTML called the X-ALT-DESC property ParameterList htmlParameters = new ParameterList(); XParameter fmtTypeParameter = new XParameter(\"FMTTYPE\", \"text/html\"); htmlParameters.add(fmtTypeParameter); DateTime startTime, endTime; try { startTime = new DateTime(\"20171127T150000\"); endTime = new DateTime(\"20171127T160000\"); } catch (ParseException pe) { // yyyymmddTHHmmss is the correct format, but to make the compiler happy... startTime = new DateTime(); endTime = startTime; } VEvent vevent = new VEvent(startTime, endTime, \"Scott's Birthday Party\") .withProperty(ug.generateUid()) .withProperty(new DtStamp().withParameter(tzParam).getFluentTarget()) .withProperty(new DtStart().withParameter(tzParam).getFluentTarget()) .withProperty(new DtEnd().withParameter(tzParam).getFluentTarget()) .withProperty(new Location(\"Overmountain Shelter on the AT\")) .withProperty(new Description(\"See ya there!\")) .getFluentTarget(); String html = \"<font color=#ff0000>You will this description instead of the text version if you have Outlook!</font>\"; XProperty htmlProp = new XProperty(\"X-ALT-DESC\", htmlParameters, html); vevent.getProperties().add(htmlProp); iCalendar.getComponents().add(vevent);","title":"Model"},{"location":"examples/model/#ical4j-examples-model","text":"This page provides examples of using the iCal4j model to build iCalendar objects.","title":"iCal4j Examples - Model"},{"location":"examples/model/#creating-a-new-calendar","text":"Calendar calendar = new Calendar(); calendar.getProperties().add(new ProdId(\"-//Ben Fortuna//iCal4j 1.0//EN\")); calendar.getProperties().add(Version.VERSION_2_0); calendar.getProperties().add(CalScale.GREGORIAN); // Add events, etc.. calendar.getComponents().add(...); Output: BEGIN:VCALENDAR PRODID:-//Ben Fortuna//iCal4j 1.0//EN VERSION:2.0 CALSCALE:GREGORIAN END:VCALENDAR","title":"Creating a new calendar"},{"location":"examples/model/#creating-a-calendar-with-the-fluent-api","text":"The recent addition of a fluent API means we can also write the above example more succinctly: Calendar calendar = new Calendar().withProdId(\"-//Ben Fortuna//iCal4j 1.0//EN\") .withDefaults().getFluentTarget(); // Add events, etc.. calendar = calendar.withComponent(...).getFluentTarget();","title":"Creating a calendar with the fluent API"},{"location":"examples/model/#creating-an-all-day-event","text":"java.util.Calendar calendar = java.util.Calendar.getInstance(); calendar.set(java.util.Calendar.MONTH, java.util.Calendar.DECEMBER); calendar.set(java.util.Calendar.DAY_OF_MONTH, 25); // initialise as an all-day event.. VEvent christmas = new VEvent(new Date(calendar.getTime()), \"Christmas Day\"); // Generate a UID for the event.. UidGenerator ug = new UidGenerator(\"1\"); christmas.getProperties().add(ug.generateUid()); net.fortuna.ical4j.model.Calendar cal = new net.fortuna.ical4j.model.Calendar(); cal.getComponents().add(christmas); Using fluent API: ... net.fortuna.ical4j.model.Calendar cal = new net.fortuna.ical4j.model.Calendar() .withComponent( new VEvent(new Date(calendar.getTime()), \"Christmas Day\") .withProperty(ug.generateUid()).getFluentTarget()).getFluentTarget(); Output: BEGIN:VEVENT DTSTAMP:20050222T044240Z DTSTART;VALUE=DATE:20051225 SUMMARY:Christmas Day UID:20050222T044240Z-1@example.com END:VEVENT","title":"Creating an all day event"},{"location":"examples/model/#creating-a-meeting-of-four-hour-duration","text":"// Create a TimeZone TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry(); TimeZone timezone = registry.getTimeZone(\"America/Mexico_City\"); VTimeZone tz = timezone.getVTimeZone(); // Start Date is on: April 1, 2008, 9:00 am java.util.Calendar startDate = new GregorianCalendar(); startDate.setTimeZone(timezone); startDate.set(java.util.Calendar.MONTH, java.util.Calendar.APRIL); startDate.set(java.util.Calendar.DAY_OF_MONTH, 1); startDate.set(java.util.Calendar.YEAR, 2008); startDate.set(java.util.Calendar.HOUR_OF_DAY, 9); startDate.set(java.util.Calendar.MINUTE, 0); startDate.set(java.util.Calendar.SECOND, 0); // End Date is on: April 1, 2008, 13:00 java.util.Calendar endDate = new GregorianCalendar(); endDate.setTimeZone(timezone); endDate.set(java.util.Calendar.MONTH, java.util.Calendar.APRIL); endDate.set(java.util.Calendar.DAY_OF_MONTH, 1); endDate.set(java.util.Calendar.YEAR, 2008); endDate.set(java.util.Calendar.HOUR_OF_DAY, 13); endDate.set(java.util.Calendar.MINUTE, 0); endDate.set(java.util.Calendar.SECOND, 0); // Create the event String eventName = \"Progress Meeting\"; DateTime start = new DateTime(startDate.getTime()); DateTime end = new DateTime(endDate.getTime()); VEvent meeting = new VEvent(start, end, eventName); // add timezone info.. meeting.getProperties().add(tz.getTimeZoneId()); // generate unique identifier.. UidGenerator ug = new UidGenerator(\"uidGen\"); Uid uid = ug.generateUid(); meeting.getProperties().add(uid); // add attendees.. Attendee dev1 = new Attendee(URI.create(\"mailto:dev1@mycompany.com\")); dev1.getParameters().add(Role.REQ_PARTICIPANT); dev1.getParameters().add(new Cn(\"Developer 1\")); meeting.getProperties().add(dev1); Attendee dev2 = new Attendee(URI.create(\"mailto:dev2@mycompany.com\")); dev2.getParameters().add(Role.OPT_PARTICIPANT); dev2.getParameters().add(new Cn(\"Developer 2\")); meeting.getProperties().add(dev2); // Create a calendar net.fortuna.ical4j.model.Calendar icsCalendar = new net.fortuna.ical4j.model.Calendar(); icsCalendar.getProperties().add(new ProdId(\"-//Events Calendar//iCal4j 1.0//EN\")); icsCalendar.getProperties().add(CalScale.GREGORIAN); // Add the event and print icsCalendar.getComponents().add(meeting); System.out.println(icsCalendar); Using the fluent API: ... VEvent meeting = new VEvent(start, end, eventName) .withProperty(tz.getTimeZoneId()) .withProperty(ug.generateUid()) .withProperty( new Attendee(URI.create(\"mailto:dev1@mycompany.com\")) .withParameter(Role.REQ_PARTICIPANT) .withParameter(new Cn(\"Developer 1\").getFluentTarget()) .getFluentTarget()) .withProperty( new Attendee(URI.create(\"mailto:dev2@mycompany.com\")) .withParameter(Role.OPT_PARTICIPANT) .withParameter(new Cn(\"Developer 2\").getFluentTarget()) .getFluentTarget()) .getFluentTarget(); net.fortuna.ical4j.model.Calendar icsCalendar = new net.fortuna.ical4j.model.Calendar() .withProdId(\"-//Events Calendar//iCal4j 1.0//EN\") .withDefaults() .withComponent(meeting) .getFluentTarget(); System.out.println(icsCalendar);","title":"Creating a meeting of four hour duration"},{"location":"examples/model/#attaching-binary-data","text":"FileInputStream fin = new FileInputStream(\"etc/artwork/logo.png\"); ByteArrayOutputStream bout = new ByteArrayOutputStream(); for (int i = fin.read(); i >= 0;) { bout.write(i); i = fin.read(); } ParameterList params = new ParameterList(); params.add(Value.BINARY); params.add(Encoding.BASE64); Attach attach = new Attach(params, bout.toByteArray()); Output: ATTACH;ENCODING=BASE64;VALUE=BINARY:iVBORw0KGgoAAAANSUhEUgAAAUYAAACJCAYAA ABQHpElAAAABHNCSVQICAgIfAhkiAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ 5vuPBoAABPKSURBVHic7d15tFX1dcDx72aQyQkMqAiIojjFASc0GmOlRqKmcR6XpkaJYtrU1 LYSp0ZZqxo1SZ2CUZPGqlXRGEdAqzKoqGjqCKgoVFF8DkVEBJRh9499HiGXB /ec3/nnN89d 3/WOmvx9J599r3vvf3O8Pvtn6gqzrkaiGwPzCw6jTZsjmrLqq9ERgGXFZdOmyajeuCqr0QOB ...","title":"Attaching binary data"},{"location":"examples/model/#html-support","text":"Starting with Outlook 2010, Outlook can now recognize HTML formatted content in an iCalendar. Here are the steps to add an alternate description in HTML with ical4j: Create a ParameterList containing a XParameter(\"FMTTYPE\", \"text/html\"). Create a XProperty with name \"X-ALT-DESC\", FMTTYPE parameterList and html. Add the XProperty to your VEvent. Example code: HostInfo hostInfo = new SimpleHostInfo(\"myHostName\"); UidGenerator ug = new UidGenerator(hostInfo, \"1\"); TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry(); VTimeZone tz = registry.getTimeZone(\"US/Eastern\").getVTimeZone(); TzId tzParam = new TzId(tz.getProperties().getProperty(Property.TZID).getValue()); Calendar iCalendar = new Calendar().withProdId(\"-//MyCalendarApp v1.0//EN\") .withDefaults().withComponent(tz); //Outlook uses a custom property to display HTML called the X-ALT-DESC property ParameterList htmlParameters = new ParameterList(); XParameter fmtTypeParameter = new XParameter(\"FMTTYPE\", \"text/html\"); htmlParameters.add(fmtTypeParameter); DateTime startTime, endTime; try { startTime = new DateTime(\"20171127T150000\"); endTime = new DateTime(\"20171127T160000\"); } catch (ParseException pe) { // yyyymmddTHHmmss is the correct format, but to make the compiler happy... startTime = new DateTime(); endTime = startTime; } VEvent vevent = new VEvent(startTime, endTime, \"Scott's Birthday Party\") .withProperty(ug.generateUid()) .withProperty(new DtStamp().withParameter(tzParam).getFluentTarget()) .withProperty(new DtStart().withParameter(tzParam).getFluentTarget()) .withProperty(new DtEnd().withParameter(tzParam).getFluentTarget()) .withProperty(new Location(\"Overmountain Shelter on the AT\")) .withProperty(new Description(\"See ya there!\")) .getFluentTarget(); String html = \"<font color=#ff0000>You will this description instead of the text version if you have Outlook!</font>\"; XProperty htmlProp = new XProperty(\"X-ALT-DESC\", htmlParameters, html); vevent.getProperties().add(htmlProp); iCalendar.getComponents().add(vevent);","title":"HTML Support"},{"location":"examples/output/","text":"iCal4j Examples - Output This page provides examples of using an iCal4j model to generate iCalendar (*.ics) files. Generating a calendar file FileOutputStream fout = new FileOutputStream(\"mycalendar.ics\"); CalendarOutputter outputter = new CalendarOutputter(); outputter.output(calendar, fout);","title":"Output"},{"location":"examples/output/#ical4j-examples-output","text":"This page provides examples of using an iCal4j model to generate iCalendar (*.ics) files.","title":"iCal4j Examples - Output"},{"location":"examples/output/#generating-a-calendar-file","text":"FileOutputStream fout = new FileOutputStream(\"mycalendar.ics\"); CalendarOutputter outputter = new CalendarOutputter(); outputter.output(calendar, fout);","title":"Generating a calendar file"},{"location":"examples/parsing/","text":"iCal4j Examples - Parsing This page provides examples of using iCal4j to parse iCalendar (*.ics) files. Parsing a calendar file FileInputStream fin = new FileInputStream(\"mycalendar.ics\"); CalendarBuilder builder = new CalendarBuilder(); Calendar calendar = builder.build(fin); Parsing a calendar string String myCalendarString = ... StringReader sin = new StringReader(myCalendarString); CalendarBuilder builder = new CalendarBuilder(); Calendar calendar = builder.build(sin);","title":"Parsing"},{"location":"examples/parsing/#ical4j-examples-parsing","text":"This page provides examples of using iCal4j to parse iCalendar (*.ics) files.","title":"iCal4j Examples - Parsing"},{"location":"examples/parsing/#parsing-a-calendar-file","text":"FileInputStream fin = new FileInputStream(\"mycalendar.ics\"); CalendarBuilder builder = new CalendarBuilder(); Calendar calendar = builder.build(fin);","title":"Parsing a calendar file"},{"location":"examples/parsing/#parsing-a-calendar-string","text":"String myCalendarString = ... StringReader sin = new StringReader(myCalendarString); CalendarBuilder builder = new CalendarBuilder(); Calendar calendar = builder.build(sin);","title":"Parsing a calendar string"},{"location":"examples/recur/","text":"iCal4j Examples - Recurrences This page provides examples of using iCal4j to calculate recurrences of iCal4j objects. Generating event dates // Reading the file and creating the calendar CalendarBuilder builder = new CalendarBuilder(); Calendar cal = null; try { cal = builder.build(new FileInputStream(\"my.ics\")); } catch (IOException e) { e.printStackTrace(); } catch (ParserException e) { e.printStackTrace(); } // Create the date range which is desired. DateTime from = new DateTime(\"20100101T070000Z\"); DateTime to = new DateTime(\"20100201T070000Z\");; Period period = new Period(from, to); // For each VEVENT in the ICS for (Object o : cal.getComponents(\"VEVENT\")) { Component c = (Component)o; PeriodList list = c.calculateRecurrenceSet(period); for (Object po : list) { System.out.println((Period)po); } }","title":"Recurrences"},{"location":"examples/recur/#ical4j-examples-recurrences","text":"This page provides examples of using iCal4j to calculate recurrences of iCal4j objects.","title":"iCal4j Examples - Recurrences"},{"location":"examples/recur/#generating-event-dates","text":"// Reading the file and creating the calendar CalendarBuilder builder = new CalendarBuilder(); Calendar cal = null; try { cal = builder.build(new FileInputStream(\"my.ics\")); } catch (IOException e) { e.printStackTrace(); } catch (ParserException e) { e.printStackTrace(); } // Create the date range which is desired. DateTime from = new DateTime(\"20100101T070000Z\"); DateTime to = new DateTime(\"20100201T070000Z\");; Period period = new Period(from, to); // For each VEVENT in the ICS for (Object o : cal.getComponents(\"VEVENT\")) { Component c = (Component)o; PeriodList list = c.calculateRecurrenceSet(period); for (Object po : list) { System.out.println((Period)po); } }","title":"Generating event dates"},{"location":"examples/vcard/","text":"iCal4j Examples - VCard This page provides examples of using an iCal4j VCard model to generate VCard objects. Creating a simple vCard List<Property> props = new ArrayList<Property>(); props.add(new Source(URI.create(\"ldap://ldap.example.com/cn=Babs%20Jensen,%20o=Babsco,%20c=US\"))); props.add(new Name(\"Babs Jensen's Contact Information\")); props.add(Kind.INDIVIDUAL); // add a custom property.. props.add(new Property(\"test\") { @Override public String getValue() { return null; } @Override public void validate() throws ValidationException { } }); VCard vcard = new VCard(props);","title":"VCard"},{"location":"examples/vcard/#ical4j-examples-vcard","text":"This page provides examples of using an iCal4j VCard model to generate VCard objects.","title":"iCal4j Examples - VCard"},{"location":"examples/vcard/#creating-a-simple-vcard","text":"List<Property> props = new ArrayList<Property>(); props.add(new Source(URI.create(\"ldap://ldap.example.com/cn=Babs%20Jensen,%20o=Babsco,%20c=US\"))); props.add(new Name(\"Babs Jensen's Contact Information\")); props.add(Kind.INDIVIDUAL); // add a custom property.. props.add(new Property(\"test\") { @Override public String getValue() { return null; } @Override public void validate() throws ValidationException { } }); VCard vcard = new VCard(props);","title":"Creating a simple vCard"},{"location":"services/","text":"iCal4j Services A collection of iCalendar functions delivered as HTTP services. Overview iCal4j services is a collection of libraries that support deployment as a service. For example: iCal4j Validator iCal4j Serializer iCal4j FreeBusy iCal4j Connector iCal4j Integration iCal4j Query iCal4j User Agent ... Each of these libraries are bundled with an HTTP Servlet and may be deployed either in a Web container or standalone with an embedded Jetty server. They are stateless services and containerisation will be supported to provide maximum choice in how they are deployed. Examples The following examples demonstrate how you might use iCal4j services to enhance an application or service. Validate (and sanitise) incoming iCalendar data The issue of calendar spam and other embedded nasties is becoming more of a concern for iCalendar data. The iCal4j Validator can potentially be used to screen incoming data not only for RFC compliance but also against unwanted or blacklisted content. Generate Atom feeds from published iCalendar data Using the iCal4j Serializer you can easily transform iCalendar data to Atom feed data, including expansion of recurring events. Publish free/busy information for published iCalendar data You may have a need for the iCal4j FreeBusy service to generate free/busy data from resource calendars to assist with scheduling. Query iCalendar data using filter expressions iCal4j includes support for a filter expression language that may be used to extract information from iCalendar object data using the iCal4j Query service. Process iCalendar iTIP for scheduling The iTIP specification defines how to coordinate iCalendar data between multiple calendar user agents (CUAs), and the iCal4j User Agent simplifies the processing of this data. Send and receive iCalendar data asynchronously TBD. Manage iCalendar data with CalDAV TBD.","title":"Overview"},{"location":"services/#ical4j-services","text":"A collection of iCalendar functions delivered as HTTP services.","title":"iCal4j Services"},{"location":"services/#overview","text":"iCal4j services is a collection of libraries that support deployment as a service. For example: iCal4j Validator iCal4j Serializer iCal4j FreeBusy iCal4j Connector iCal4j Integration iCal4j Query iCal4j User Agent ... Each of these libraries are bundled with an HTTP Servlet and may be deployed either in a Web container or standalone with an embedded Jetty server. They are stateless services and containerisation will be supported to provide maximum choice in how they are deployed.","title":"Overview"},{"location":"services/#examples","text":"The following examples demonstrate how you might use iCal4j services to enhance an application or service.","title":"Examples"},{"location":"services/#validate-and-sanitise-incoming-icalendar-data","text":"The issue of calendar spam and other embedded nasties is becoming more of a concern for iCalendar data. The iCal4j Validator can potentially be used to screen incoming data not only for RFC compliance but also against unwanted or blacklisted content.","title":"Validate (and sanitise) incoming iCalendar data"},{"location":"services/#generate-atom-feeds-from-published-icalendar-data","text":"Using the iCal4j Serializer you can easily transform iCalendar data to Atom feed data, including expansion of recurring events.","title":"Generate Atom feeds from published iCalendar data"},{"location":"services/#publish-freebusy-information-for-published-icalendar-data","text":"You may have a need for the iCal4j FreeBusy service to generate free/busy data from resource calendars to assist with scheduling.","title":"Publish free/busy information for published iCalendar data"},{"location":"services/#query-icalendar-data-using-filter-expressions","text":"iCal4j includes support for a filter expression language that may be used to extract information from iCalendar object data using the iCal4j Query service.","title":"Query iCalendar data using filter expressions"},{"location":"services/#process-icalendar-itip-for-scheduling","text":"The iTIP specification defines how to coordinate iCalendar data between multiple calendar user agents (CUAs), and the iCal4j User Agent simplifies the processing of this data.","title":"Process iCalendar iTIP for scheduling"},{"location":"services/#send-and-receive-icalendar-data-asynchronously","text":"TBD.","title":"Send and receive iCalendar data asynchronously"},{"location":"services/#manage-icalendar-data-with-caldav","text":"TBD.","title":"Manage iCalendar data with CalDAV"},{"location":"services/connector/","text":"iCal4j Connector iCal4j Connector is an extension library that provides support for connecting to back-end calendar/vCard servers. Initial support includes connecting to CalDAV- and CardDAV-compliant servers, as well as Java Content Repository (JCR) implementations. Minimum requirements iCal4j Connector requires a minimum of Java 8 due to the use of features introduced in this version. Getting Started [[ConnectorTutorial|Tutorial]] Project Information Project Home Javadocs Download Releases Related projects CalDAV Home RFC4791 - Calendaring Extensions to WebDAV (CalDAV) CardDAV Wiki draft-ietf-vcarddav-carddav-01 - vCard Extensions to WebDAV (CardDAV) caldav4j Comparison of CalDAV and CardDAV implementations","title":"iCal4j Connector"},{"location":"services/connector/#ical4j-connector","text":"iCal4j Connector is an extension library that provides support for connecting to back-end calendar/vCard servers. Initial support includes connecting to CalDAV- and CardDAV-compliant servers, as well as Java Content Repository (JCR) implementations.","title":"iCal4j Connector"},{"location":"services/connector/#minimum-requirements","text":"iCal4j Connector requires a minimum of Java 8 due to the use of features introduced in this version.","title":"Minimum requirements"},{"location":"services/connector/#getting-started","text":"[[ConnectorTutorial|Tutorial]]","title":"Getting Started"},{"location":"services/connector/#project-information","text":"Project Home Javadocs","title":"Project Information"},{"location":"services/connector/#download","text":"Releases","title":"Download"},{"location":"services/connector/#related-projects","text":"CalDAV Home RFC4791 - Calendaring Extensions to WebDAV (CalDAV) CardDAV Wiki draft-ietf-vcarddav-carddav-01 - vCard Extensions to WebDAV (CardDAV) caldav4j Comparison of CalDAV and CardDAV implementations","title":"Related projects"},{"location":"services/freebusy/","text":"iCal4j - FreeBusy The iCal4j FreeBusy service provides support for generating iCalendar free/busy information from existing iCalendar data. Overview The iCalendar specification defines the VFREEBUSY component that may be used to request, respond or publish resource availability.","title":"iCal4j FreeBusy"},{"location":"services/freebusy/#ical4j-freebusy","text":"The iCal4j FreeBusy service provides support for generating iCalendar free/busy information from existing iCalendar data.","title":"iCal4j - FreeBusy"},{"location":"services/freebusy/#overview","text":"The iCalendar specification defines the VFREEBUSY component that may be used to request, respond or publish resource availability.","title":"Overview"},{"location":"services/integration/","text":"iCal4j Integration iCal4j Integration provides support for popular calendar message transports and tooling. Overview Whilst the iCal4j library provides support for parsing, validating and producing iCalendar data formats, typically a useful application will also need to integrate with messaging and other transports to support interoperability with external systems. Email is the most widely supported transport for calendaring systems, however this library also aims to support integration with other messaging tools and public APIs. Email - The official iCalendar message transport as defined by the iMiP RFC. Apache Camel - Support for iCalendar and vCard endpoints in Apache Camel Quartz - Support for Quartz jobs triggered by VALARM definitions Feed - Support for parsing and generating RSS/Atom feeds from iCalendar data AWS SNS, SQS, etc. - Cloud-native messaging support JMS - support for Java messaging Apache Camel Added the ical4j-integration dependency to your project and configure your routes: from('ical:http://tzurl.org/zoneinfo/Australia/Melbourne') .to(\"mock:result\") References Project Home Javadocs","title":"iCal4j Integration"},{"location":"services/integration/#ical4j-integration","text":"iCal4j Integration provides support for popular calendar message transports and tooling.","title":"iCal4j Integration"},{"location":"services/integration/#overview","text":"Whilst the iCal4j library provides support for parsing, validating and producing iCalendar data formats, typically a useful application will also need to integrate with messaging and other transports to support interoperability with external systems. Email is the most widely supported transport for calendaring systems, however this library also aims to support integration with other messaging tools and public APIs. Email - The official iCalendar message transport as defined by the iMiP RFC. Apache Camel - Support for iCalendar and vCard endpoints in Apache Camel Quartz - Support for Quartz jobs triggered by VALARM definitions Feed - Support for parsing and generating RSS/Atom feeds from iCalendar data AWS SNS, SQS, etc. - Cloud-native messaging support JMS - support for Java messaging","title":"Overview"},{"location":"services/integration/#apache-camel","text":"Added the ical4j-integration dependency to your project and configure your routes: from('ical:http://tzurl.org/zoneinfo/Australia/Melbourne') .to(\"mock:result\")","title":"Apache Camel"},{"location":"services/integration/#references","text":"Project Home Javadocs","title":"References"},{"location":"services/query/","text":"iCal4j Query Query iCalendar data using iCal4j filter expressions.","title":"iCal4j Query"},{"location":"services/query/#ical4j-query","text":"Query iCalendar data using iCal4j filter expressions.","title":"iCal4j Query"},{"location":"services/serializer/","text":"iCal4j Serializer The iCal4j Serializer library provides support for conversion between iCal4j component models and other formats for calendar and contact data. Overview A number of JSON-based specifications are available for representing iCalendar data, with the following supported in this library: jCal/jCard jsCalendar/jsCard Schema.org (JSON-LD) JOT API","title":"iCal4j Serializer"},{"location":"services/serializer/#ical4j-serializer","text":"The iCal4j Serializer library provides support for conversion between iCal4j component models and other formats for calendar and contact data.","title":"iCal4j Serializer"},{"location":"services/serializer/#overview","text":"A number of JSON-based specifications are available for representing iCalendar data, with the following supported in this library: jCal/jCard jsCalendar/jsCard Schema.org (JSON-LD) JOT API","title":"Overview"},{"location":"services/tzurl/","text":"TZURL.org TZURL.org is a public site hosting TimeZone information in iCalendar format. Overview TBD.","title":"tzurl.org"},{"location":"services/tzurl/#tzurlorg","text":"TZURL.org is a public site hosting TimeZone information in iCalendar format.","title":"TZURL.org"},{"location":"services/tzurl/#overview","text":"TBD.","title":"Overview"},{"location":"services/useragent/","text":"iCal4j User Agent Communicate with external systems via iCalendar iTIP protocols.","title":"iCal4j User Agent"},{"location":"services/useragent/#ical4j-user-agent","text":"Communicate with external systems via iCalendar iTIP protocols.","title":"iCal4j User Agent"},{"location":"services/validator/","text":"iCal4j - Validator The iCal4j Validator is a service that provides a thin veneer over the iCal4j validation framework.","title":"iCal4j Validator"},{"location":"services/validator/#ical4j-validator","text":"The iCal4j Validator is a service that provides a thin veneer over the iCal4j validation framework.","title":"iCal4j - Validator"}]}